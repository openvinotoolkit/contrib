// Copyright (C) 2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#include <single_layer_tests/activation.hpp>
#include <cuda_test_constants.hpp>

namespace LayerTestsDefinitions {
namespace {

// =============================================================================
// clang-format off
// {AUTOGENERATED_TESTS_BEGIN_TAG_RELU}

// Attrs:  {}
// In:     (1, 1000, 14, 14)
// Out:    (1, 1000, 14, 14)
// Operators: 'squeezenet1.1:opid143' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid143,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1000, 14, 14}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1024, 14, 14)
// Out:    (1, 1024, 14, 14)
// Operators: 'resnet-50-caffe2:opid150' [FP16, FP32], 'resnet-50-caffe2:opid166' [FP16, FP32], 'resnet-50-caffe2:opid182' [FP16, FP32], 'resnet-50-caffe2:opid198' [FP16, FP32], 'resnet-50-caffe2:opid214' [FP16, FP32], 'resnet-50-caffe2:opid230' [FP16, FP32], 'resnet-50-pytorch:opid150' [FP32], 'resnet-50-pytorch:opid166' [FP32], 'resnet-50-pytorch:opid182' [FP32], 'resnet-50-pytorch:opid198' [FP32], 'resnet-50-pytorch:opid214' [FP32], 'resnet-50-pytorch:opid230' [FP32], 'resnet-50-tf:opid148' [FP16, FP32], 'resnet-50-tf:opid164' [FP16, FP32], 'resnet-50-tf:opid180' [FP16, FP32], 'resnet-50-tf:opid196' [FP16, FP32], 'resnet-50-tf:opid212' [FP16, FP32], 'resnet-50-tf:opid228' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid150,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1024, 14, 14}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 100, 171)
// Out:    (1, 128, 100, 171)
// Operators: 'mask_rcnn_inception_v2_coco:opid102' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid102,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 100, 171}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 112, 112)
// Out:    (1, 128, 112, 112)
// Operators: 'vgg16-IR:opid18' [FP16, FP32], 'vgg16-IR:opid23' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_vgg16_IR_opid18,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 112, 112}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 16, 16)
// Out:    (1, 128, 16, 16)
// Operators: '2d_unet-graph-transform:opid38' [FP32], '2d_unet-graph-transform:opid43' [FP32], '2d_unet-graph-transform:opid65' [FP32], '2d_unet-graph-transform:opid70' [FP32], '2d_unet:opid100' [FP16, FP32], '2d_unet:opid105' [FP16, FP32], '2d_unet:opid38' [FP16, FP32], '2d_unet:opid43' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_2d_unet_graph_transform_opid38,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 16, 16}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 17, 17)
// Out:    (1, 128, 17, 17)
// Operators: 'googlenet-v4-tf:opid285' [FP16, FP32], 'googlenet-v4-tf:opid337' [FP16, FP32], 'googlenet-v4-tf:opid389' [FP16, FP32], 'googlenet-v4-tf:opid441' [FP16, FP32], 'googlenet-v4-tf:opid493' [FP16, FP32], 'googlenet-v4-tf:opid545' [FP16, FP32], 'googlenet-v4-tf:opid597' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid285,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 17, 17}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 18, 18, 18)
// Out:    (1, 128, 18, 18, 18)
// Operators: '3d_unet-graph-transform:opid38' [FP32], '3d_unet-graph-transform:opid43' [FP32], '3d_unet-graph-transform:opid65' [FP32], '3d_unet-graph-transform:opid70' [FP32], '3d_unet:opid108' [FP16, FP32], '3d_unet:opid113' [FP16, FP32], '3d_unet:opid38' [FP16, FP32], '3d_unet:opid43' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_3d_unet_graph_transform_opid38,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 18, 18, 18}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 28, 28)
// Out:    (1, 128, 28, 28)
// Operators: 'resnet-50-caffe2:opid103' [FP16, FP32], 'resnet-50-caffe2:opid108' [FP16, FP32], 'resnet-50-caffe2:opid119' [FP16, FP32], 'resnet-50-caffe2:opid124' [FP16, FP32], 'resnet-50-caffe2:opid72' [FP16, FP32], 'resnet-50-caffe2:opid87' [FP16, FP32], 'resnet-50-caffe2:opid92' [FP16, FP32], 'resnet-50-pytorch:opid103' [FP32], 'resnet-50-pytorch:opid108' [FP32], 'resnet-50-pytorch:opid119' [FP32], 'resnet-50-pytorch:opid124' [FP32], 'resnet-50-pytorch:opid72' [FP32], 'resnet-50-pytorch:opid87' [FP32], 'resnet-50-pytorch:opid92' [FP32], 'resnet-50-tf:opid101' [FP16, FP32], 'resnet-50-tf:opid106' [FP16, FP32], 'resnet-50-tf:opid117' [FP16, FP32], 'resnet-50-tf:opid122' [FP16, FP32], 'resnet-50-tf:opid70' [FP16, FP32], 'resnet-50-tf:opid85' [FP16, FP32], 'resnet-50-tf:opid90' [FP16, FP32], 'squeezenet1.1:opid51' [FP16, FP32], 'squeezenet1.1:opid56' [FP16, FP32], 'squeezenet1.1:opid67' [FP16, FP32], 'squeezenet1.1:opid72' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid103,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 28, 28}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 50, 86)
// Out:    (1, 128, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid149' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid154' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid160' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid176' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid186' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid191' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid197' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid208' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid218' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid245' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid149,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 50, 86}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 56, 56)
// Out:    (1, 128, 56, 56)
// Operators: 'photo_style_transfer:opid104' [FP16, FP32], 'photo_style_transfer:opid130' [FP16, FP32], 'photo_style_transfer:opid156' [FP16, FP32], 'photo_style_transfer:opid39' [FP16, FP32], 'photo_style_transfer:opid52' [FP16, FP32], 'photo_style_transfer:opid78' [FP16, FP32], 'resnet-50-caffe2:opid67' [FP16, FP32], 'resnet-50-pytorch:opid67' [FP32], 'resnet-50-tf:opid65' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_photo_style_transfer_opid104,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 56, 56}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 16, 128, 128)
// Out:    (1, 16, 128, 128)
// Operators: '2d_unet-graph-transform:opid10' [FP32], '2d_unet-graph-transform:opid113' [FP32], '2d_unet-graph-transform:opid118' [FP32], '2d_unet-graph-transform:opid5' [FP32], '2d_unet:opid10' [FP16, FP32], '2d_unet:opid253' [FP16, FP32], '2d_unet:opid258' [FP16, FP32], '2d_unet:opid5' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_2d_unet_graph_transform_opid10,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 16, 128, 128}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 16, 144, 144, 144)
// Out:    (1, 16, 144, 144, 144)
// Operators: '3d_unet-graph-transform:opid10' [FP32], '3d_unet-graph-transform:opid113' [FP32], '3d_unet-graph-transform:opid118' [FP32], '3d_unet-graph-transform:opid5' [FP32], '3d_unet:opid10' [FP16, FP32], '3d_unet:opid285' [FP16, FP32], '3d_unet:opid290' [FP16, FP32], '3d_unet:opid5' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_3d_unet_graph_transform_opid10,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 16, 144, 144, 144}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 16, 56, 56)
// Out:    (1, 16, 56, 56)
// Operators: 'squeezenet1.1:opid13' [FP16, FP32], 'squeezenet1.1:opid29' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid13,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 16, 56, 56}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 160, 50, 86)
// Out:    (1, 160, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid107' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid203' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid213' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid223' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid228' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid255' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid107,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 160, 50, 86}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 14, 14)
// Out:    (1, 192, 14, 14)
// Operators: 'squeezenet1.1:opid100' [FP16, FP32], 'squeezenet1.1:opid105' [FP16, FP32], 'squeezenet1.1:opid84' [FP16, FP32], 'squeezenet1.1:opid89' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid100,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 14, 14}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 17, 17)
// Out:    (1, 192, 17, 17)
// Operators: 'googlenet-v4-tf:opid244' [FP16, FP32], 'googlenet-v4-tf:opid259' [FP16, FP32], 'googlenet-v4-tf:opid264' [FP16, FP32], 'googlenet-v4-tf:opid296' [FP16, FP32], 'googlenet-v4-tf:opid311' [FP16, FP32], 'googlenet-v4-tf:opid316' [FP16, FP32], 'googlenet-v4-tf:opid348' [FP16, FP32], 'googlenet-v4-tf:opid363' [FP16, FP32], 'googlenet-v4-tf:opid368' [FP16, FP32], 'googlenet-v4-tf:opid400' [FP16, FP32], 'googlenet-v4-tf:opid415' [FP16, FP32], 'googlenet-v4-tf:opid420' [FP16, FP32], 'googlenet-v4-tf:opid452' [FP16, FP32], 'googlenet-v4-tf:opid467' [FP16, FP32], 'googlenet-v4-tf:opid472' [FP16, FP32], 'googlenet-v4-tf:opid504' [FP16, FP32], 'googlenet-v4-tf:opid519' [FP16, FP32], 'googlenet-v4-tf:opid524' [FP16, FP32], 'googlenet-v4-tf:opid556' [FP16, FP32], 'googlenet-v4-tf:opid571' [FP16, FP32], 'googlenet-v4-tf:opid576' [FP16, FP32], 'googlenet-v4-tf:opid603' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid244,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 17, 17}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 200, 342)
// Out:    (1, 192, 200, 342)
// Operators: 'mask_rcnn_inception_v2_coco:opid22' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid22,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 200, 342}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 35, 35)
// Out:    (1, 192, 35, 35)
// Operators: 'googlenet-v4-tf:opid222' [FP16, FP32], 'googlenet-v4-tf:opid62' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid222,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 35, 35}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 50, 86)
// Out:    (1, 192, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid166' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid250' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid260' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid265' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid166,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 50, 86}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 8, 8)
// Out:    (1, 192, 8, 8)
// Operators: 'googlenet-v4-tf:opid608' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid608,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 8, 8}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 2048, 7, 7)
// Out:    (1, 2048, 7, 7)
// Operators: 'resnet-50-caffe2:opid250' [FP16, FP32], 'resnet-50-caffe2:opid266' [FP16, FP32], 'resnet-50-caffe2:opid282' [FP16, FP32], 'resnet-50-pytorch:opid250' [FP32], 'resnet-50-pytorch:opid266' [FP32], 'resnet-50-pytorch:opid282' [FP32], 'resnet-50-tf:opid248' [FP16, FP32], 'resnet-50-tf:opid264' [FP16, FP32], 'resnet-50-tf:opid280' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid250,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 2048, 7, 7}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 224, 17, 17)
// Out:    (1, 224, 17, 17)
// Operators: 'googlenet-v4-tf:opid249' [FP16, FP32], 'googlenet-v4-tf:opid269' [FP16, FP32], 'googlenet-v4-tf:opid274' [FP16, FP32], 'googlenet-v4-tf:opid301' [FP16, FP32], 'googlenet-v4-tf:opid321' [FP16, FP32], 'googlenet-v4-tf:opid326' [FP16, FP32], 'googlenet-v4-tf:opid353' [FP16, FP32], 'googlenet-v4-tf:opid373' [FP16, FP32], 'googlenet-v4-tf:opid378' [FP16, FP32], 'googlenet-v4-tf:opid405' [FP16, FP32], 'googlenet-v4-tf:opid425' [FP16, FP32], 'googlenet-v4-tf:opid430' [FP16, FP32], 'googlenet-v4-tf:opid457' [FP16, FP32], 'googlenet-v4-tf:opid477' [FP16, FP32], 'googlenet-v4-tf:opid482' [FP16, FP32], 'googlenet-v4-tf:opid509' [FP16, FP32], 'googlenet-v4-tf:opid529' [FP16, FP32], 'googlenet-v4-tf:opid534' [FP16, FP32], 'googlenet-v4-tf:opid561' [FP16, FP32], 'googlenet-v4-tf:opid581' [FP16, FP32], 'googlenet-v4-tf:opid586' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid249,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 224, 17, 17}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 224, 35, 35)
// Out:    (1, 224, 35, 35)
// Operators: 'googlenet-v4-tf:opid227' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid227,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 224, 35, 35}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 224, 50, 86)
// Out:    (1, 224, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid129' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid129,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 224, 50, 86}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256)
// Out:    (1, 256)
// Operators: 'Tacotron2-decoder_iter:opid3' [FP32], 'Tacotron2-decoder_iter:opid36' [FP32], 'Tacotron2-graph-transform-cuda-decoder_iter:opid15' [FP32], 'Tacotron2-graph-transform-cuda-decoder_iter:opid25' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_Tacotron2_decoder_iter_opid3,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 14, 14)
// Out:    (1, 256, 14, 14)
// Operators: 'resnet-50-caffe2:opid140' [FP16, FP32], 'resnet-50-caffe2:opid155' [FP16, FP32], 'resnet-50-caffe2:opid160' [FP16, FP32], 'resnet-50-caffe2:opid171' [FP16, FP32], 'resnet-50-caffe2:opid176' [FP16, FP32], 'resnet-50-caffe2:opid187' [FP16, FP32], 'resnet-50-caffe2:opid192' [FP16, FP32], 'resnet-50-caffe2:opid203' [FP16, FP32], 'resnet-50-caffe2:opid208' [FP16, FP32], 'resnet-50-caffe2:opid219' [FP16, FP32], 'resnet-50-caffe2:opid224' [FP16, FP32], 'resnet-50-pytorch:opid140' [FP32], 'resnet-50-pytorch:opid155' [FP32], 'resnet-50-pytorch:opid160' [FP32], 'resnet-50-pytorch:opid171' [FP32], 'resnet-50-pytorch:opid176' [FP32], 'resnet-50-pytorch:opid187' [FP32], 'resnet-50-pytorch:opid192' [FP32], 'resnet-50-pytorch:opid203' [FP32], 'resnet-50-pytorch:opid208' [FP32], 'resnet-50-pytorch:opid219' [FP32], 'resnet-50-pytorch:opid224' [FP32], 'resnet-50-tf:opid138' [FP16, FP32], 'resnet-50-tf:opid153' [FP16, FP32], 'resnet-50-tf:opid158' [FP16, FP32], 'resnet-50-tf:opid169' [FP16, FP32], 'resnet-50-tf:opid174' [FP16, FP32], 'resnet-50-tf:opid185' [FP16, FP32], 'resnet-50-tf:opid190' [FP16, FP32], 'resnet-50-tf:opid201' [FP16, FP32], 'resnet-50-tf:opid206' [FP16, FP32], 'resnet-50-tf:opid217' [FP16, FP32], 'resnet-50-tf:opid222' [FP16, FP32], 'squeezenet1.1:opid116' [FP16, FP32], 'squeezenet1.1:opid121' [FP16, FP32], 'squeezenet1.1:opid132' [FP16, FP32], 'squeezenet1.1:opid137' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid140,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 14, 14}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 17, 17)
// Out:    (1, 256, 17, 17)
// Operators: 'googlenet-v4-tf:opid232' [FP16, FP32], 'googlenet-v4-tf:opid254' [FP16, FP32], 'googlenet-v4-tf:opid279' [FP16, FP32], 'googlenet-v4-tf:opid306' [FP16, FP32], 'googlenet-v4-tf:opid331' [FP16, FP32], 'googlenet-v4-tf:opid358' [FP16, FP32], 'googlenet-v4-tf:opid383' [FP16, FP32], 'googlenet-v4-tf:opid410' [FP16, FP32], 'googlenet-v4-tf:opid435' [FP16, FP32], 'googlenet-v4-tf:opid462' [FP16, FP32], 'googlenet-v4-tf:opid487' [FP16, FP32], 'googlenet-v4-tf:opid514' [FP16, FP32], 'googlenet-v4-tf:opid539' [FP16, FP32], 'googlenet-v4-tf:opid566' [FP16, FP32], 'googlenet-v4-tf:opid591' [FP16, FP32], 'googlenet-v4-tf:opid613' [FP16, FP32], 'googlenet-v4-tf:opid618' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid232,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 17, 17}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 28, 28)
// Out:    (1, 256, 28, 28)
// Operators: 'resnet-50-caffe2:opid135' [FP16, FP32], 'resnet-50-pytorch:opid135' [FP32], 'resnet-50-tf:opid133' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid135,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 28, 28}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 56, 56)
// Out:    (1, 256, 56, 56)
// Operators: 'resnet-50-caffe2:opid30' [FP16, FP32], 'resnet-50-caffe2:opid46' [FP16, FP32], 'resnet-50-caffe2:opid62' [FP16, FP32], 'resnet-50-pytorch:opid30' [FP32], 'resnet-50-pytorch:opid46' [FP32], 'resnet-50-pytorch:opid62' [FP32], 'resnet-50-tf:opid28' [FP16, FP32], 'resnet-50-tf:opid44' [FP16, FP32], 'resnet-50-tf:opid60' [FP16, FP32], 'vgg16-IR:opid29' [FP16, FP32], 'vgg16-IR:opid34' [FP16, FP32], 'vgg16-IR:opid39' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid30,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 56, 56}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 8, 8)
// Out:    (1, 256, 8, 8)
// Operators: '2d_unet-graph-transform:opid49' [FP32], '2d_unet-graph-transform:opid54' [FP32], '2d_unet:opid49' [FP16, FP32], '2d_unet:opid54' [FP16, FP32], 'googlenet-v4-tf:opid635' [FP16, FP32], 'googlenet-v4-tf:opid645' [FP16, FP32], 'googlenet-v4-tf:opid650' [FP16, FP32], 'googlenet-v4-tf:opid671' [FP16, FP32], 'googlenet-v4-tf:opid676' [FP16, FP32], 'googlenet-v4-tf:opid683' [FP16, FP32], 'googlenet-v4-tf:opid689' [FP16, FP32], 'googlenet-v4-tf:opid699' [FP16, FP32], 'googlenet-v4-tf:opid704' [FP16, FP32], 'googlenet-v4-tf:opid725' [FP16, FP32], 'googlenet-v4-tf:opid730' [FP16, FP32], 'googlenet-v4-tf:opid737' [FP16, FP32], 'googlenet-v4-tf:opid743' [FP16, FP32], 'googlenet-v4-tf:opid753' [FP16, FP32], 'googlenet-v4-tf:opid758' [FP16, FP32], 'googlenet-v4-tf:opid779' [FP16, FP32], 'googlenet-v4-tf:opid784' [FP16, FP32], 'googlenet-v4-tf:opid791' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_2d_unet_graph_transform_opid49,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 8, 8}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 9, 9, 9)
// Out:    (1, 256, 9, 9, 9)
// Operators: '3d_unet-graph-transform:opid49' [FP32], '3d_unet-graph-transform:opid54' [FP32], '3d_unet:opid49' [FP16, FP32], '3d_unet:opid54' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_3d_unet_graph_transform_opid49,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 9, 9, 9}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 100, 171)
// Out:    (1, 32, 100, 171)
// Operators: 'mask_rcnn_inception_v2_coco:opid59' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid59,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 100, 171}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 147, 147)
// Out:    (1, 32, 147, 147)
// Operators: 'googlenet-v4-tf:opid14' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid14,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 147, 147}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 149, 149)
// Out:    (1, 32, 149, 149)
// Operators: 'googlenet-v4-tf:opid9' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid9,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 149, 149}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 224, 224)
// Out:    (1, 32, 224, 224)
// Operators: 'photo_style_transfer:opid13' [FP16, FP32], 'photo_style_transfer:opid215' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_photo_style_transfer_opid13,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 224, 224}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 28, 28)
// Out:    (1, 32, 28, 28)
// Operators: 'squeezenet1.1:opid46' [FP16, FP32], 'squeezenet1.1:opid62' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid46,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 28, 28}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 64, 64)
// Out:    (1, 32, 64, 64)
// Operators: '2d_unet-graph-transform:opid102' [FP32], '2d_unet-graph-transform:opid16' [FP32], '2d_unet-graph-transform:opid21' [FP32], '2d_unet-graph-transform:opid97' [FP32], '2d_unet:opid16' [FP16, FP32], '2d_unet:opid202' [FP16, FP32], '2d_unet:opid207' [FP16, FP32], '2d_unet:opid21' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_2d_unet_graph_transform_opid102,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 64, 64}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 72, 72, 72)
// Out:    (1, 32, 72, 72, 72)
// Operators: '3d_unet-graph-transform:opid102' [FP32], '3d_unet-graph-transform:opid16' [FP32], '3d_unet-graph-transform:opid21' [FP32], '3d_unet-graph-transform:opid97' [FP32], '3d_unet:opid16' [FP16, FP32], '3d_unet:opid21' [FP16, FP32], '3d_unet:opid226' [FP16, FP32], '3d_unet:opid231' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_3d_unet_graph_transform_opid102,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 72, 72, 72}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 320, 17, 17)
// Out:    (1, 320, 17, 17)
// Operators: 'googlenet-v4-tf:opid623' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid623,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 320, 17, 17}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 320, 8, 8)
// Out:    (1, 320, 8, 8)
// Operators: 'googlenet-v4-tf:opid628' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid628,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 320, 8, 8}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 384, 17, 17)
// Out:    (1, 384, 17, 17)
// Operators: 'googlenet-v4-tf:opid217' [FP16, FP32], 'googlenet-v4-tf:opid239' [FP16, FP32], 'googlenet-v4-tf:opid291' [FP16, FP32], 'googlenet-v4-tf:opid343' [FP16, FP32], 'googlenet-v4-tf:opid395' [FP16, FP32], 'googlenet-v4-tf:opid447' [FP16, FP32], 'googlenet-v4-tf:opid499' [FP16, FP32], 'googlenet-v4-tf:opid551' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid217,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 384, 17, 17}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 384, 8, 8)
// Out:    (1, 384, 8, 8)
// Operators: 'googlenet-v4-tf:opid640' [FP16, FP32], 'googlenet-v4-tf:opid656' [FP16, FP32], 'googlenet-v4-tf:opid694' [FP16, FP32], 'googlenet-v4-tf:opid710' [FP16, FP32], 'googlenet-v4-tf:opid748' [FP16, FP32], 'googlenet-v4-tf:opid764' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid640,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 384, 8, 8}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 4096)
// Out:    (1, 4096)
// Operators: 'vgg16-IR:opid84' [FP16, FP32], 'vgg16-IR:opid96' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_vgg16_IR_opid84,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 4096}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 448, 8, 8)
// Out:    (1, 448, 8, 8)
// Operators: 'googlenet-v4-tf:opid661' [FP16, FP32], 'googlenet-v4-tf:opid715' [FP16, FP32], 'googlenet-v4-tf:opid769' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid661,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 448, 8, 8}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 48, 14, 14)
// Out:    (1, 48, 14, 14)
// Operators: 'squeezenet1.1:opid79' [FP16, FP32], 'squeezenet1.1:opid95' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid79,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 48, 14, 14}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 1000)
// Out:    (1, 512, 1000)
// Operators: 'Tacotron2-encoder:opid10' [FP32], 'Tacotron2-encoder:opid15' [FP32], 'Tacotron2-encoder:opid20' [FP32], 'Tacotron2-graph-transform-cuda-encoder:opid11' [FP32], 'Tacotron2-graph-transform-cuda-encoder:opid16' [FP32], 'Tacotron2-graph-transform-cuda-encoder:opid21' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_Tacotron2_encoder_opid10,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 1000}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 14, 14)
// Out:    (1, 512, 14, 14)
// Operators: 'resnet-50-caffe2:opid235' [FP16, FP32], 'resnet-50-pytorch:opid235' [FP32], 'resnet-50-tf:opid233' [FP16, FP32], 'vgg16-IR:opid61' [FP16, FP32], 'vgg16-IR:opid66' [FP16, FP32], 'vgg16-IR:opid71' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid235,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 14, 14}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 28, 28)
// Out:    (1, 512, 28, 28)
// Operators: 'resnet-50-caffe2:opid114' [FP16, FP32], 'resnet-50-caffe2:opid130' [FP16, FP32], 'resnet-50-caffe2:opid82' [FP16, FP32], 'resnet-50-caffe2:opid98' [FP16, FP32], 'resnet-50-pytorch:opid114' [FP32], 'resnet-50-pytorch:opid130' [FP32], 'resnet-50-pytorch:opid82' [FP32], 'resnet-50-pytorch:opid98' [FP32], 'resnet-50-tf:opid112' [FP16, FP32], 'resnet-50-tf:opid128' [FP16, FP32], 'resnet-50-tf:opid80' [FP16, FP32], 'resnet-50-tf:opid96' [FP16, FP32], 'vgg16-IR:opid45' [FP16, FP32], 'vgg16-IR:opid50' [FP16, FP32], 'vgg16-IR:opid55' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid114,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 28, 28}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 7, 7)
// Out:    (1, 512, 7, 7)
// Operators: 'resnet-50-caffe2:opid240' [FP16, FP32], 'resnet-50-caffe2:opid255' [FP16, FP32], 'resnet-50-caffe2:opid260' [FP16, FP32], 'resnet-50-caffe2:opid271' [FP16, FP32], 'resnet-50-caffe2:opid276' [FP16, FP32], 'resnet-50-pytorch:opid240' [FP32], 'resnet-50-pytorch:opid255' [FP32], 'resnet-50-pytorch:opid260' [FP32], 'resnet-50-pytorch:opid271' [FP32], 'resnet-50-pytorch:opid276' [FP32], 'resnet-50-tf:opid238' [FP16, FP32], 'resnet-50-tf:opid253' [FP16, FP32], 'resnet-50-tf:opid258' [FP16, FP32], 'resnet-50-tf:opid269' [FP16, FP32], 'resnet-50-tf:opid274' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid240,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 7, 7}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 8, 8)
// Out:    (1, 512, 8, 8)
// Operators: 'googlenet-v4-tf:opid666' [FP16, FP32], 'googlenet-v4-tf:opid720' [FP16, FP32], 'googlenet-v4-tf:opid774' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid666,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 8, 8}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 100, 171)
// Out:    (1, 64, 100, 171)
// Operators: 'mask_rcnn_inception_v2_coco:opid112' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid28' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid33' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid38' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid43' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid65' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid70' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid80' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid96' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid112,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 100, 171}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 112, 112)
// Out:    (1, 64, 112, 112)
// Operators: 'photo_style_transfer:opid192' [FP16, FP32], 'photo_style_transfer:opid26' [FP16, FP32], 'resnet-50-caffe2:opid9' [FP16, FP32], 'resnet-50-pytorch:opid9' [FP32], 'resnet-50-tf:opid7' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_photo_style_transfer_opid192,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 112, 112}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 113, 113)
// Out:    (1, 64, 113, 113)
// Operators: 'squeezenet1.1:opid7' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid7,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 113, 113}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 14, 14)
// Out:    (1, 64, 14, 14)
// Operators: 'squeezenet1.1:opid111' [FP16, FP32], 'squeezenet1.1:opid127' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid111,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 14, 14}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 147, 147)
// Out:    (1, 64, 147, 147)
// Operators: 'googlenet-v4-tf:opid19' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid19,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 147, 147}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 200, 342)
// Out:    (1, 64, 200, 342)
// Operators: 'mask_rcnn_inception_v2_coco:opid17' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid17,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 200, 342}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 224, 224)
// Out:    (1, 64, 224, 224)
// Operators: 'vgg16-IR:opid12' [FP16, FP32], 'vgg16-IR:opid7' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_vgg16_IR_opid12,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 224, 224}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 32, 32)
// Out:    (1, 64, 32, 32)
// Operators: '2d_unet-graph-transform:opid27' [FP32], '2d_unet-graph-transform:opid32' [FP32], '2d_unet-graph-transform:opid81' [FP32], '2d_unet-graph-transform:opid86' [FP32], '2d_unet:opid151' [FP16, FP32], '2d_unet:opid156' [FP16, FP32], '2d_unet:opid27' [FP16, FP32], '2d_unet:opid32' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_2d_unet_graph_transform_opid27,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 32, 32}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 35, 35)
// Out:    (1, 64, 35, 35)
// Operators: 'googlenet-v4-tf:opid111' [FP16, FP32], 'googlenet-v4-tf:opid121' [FP16, FP32], 'googlenet-v4-tf:opid148' [FP16, FP32], 'googlenet-v4-tf:opid158' [FP16, FP32], 'googlenet-v4-tf:opid185' [FP16, FP32], 'googlenet-v4-tf:opid195' [FP16, FP32], 'googlenet-v4-tf:opid74' [FP16, FP32], 'googlenet-v4-tf:opid84' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid111,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 35, 35}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 36, 36, 36)
// Out:    (1, 64, 36, 36, 36)
// Operators: '3d_unet-graph-transform:opid27' [FP32], '3d_unet-graph-transform:opid32' [FP32], '3d_unet-graph-transform:opid81' [FP32], '3d_unet-graph-transform:opid86' [FP32], '3d_unet:opid167' [FP16, FP32], '3d_unet:opid172' [FP16, FP32], '3d_unet:opid27' [FP16, FP32], '3d_unet:opid32' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_3d_unet_graph_transform_opid27,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 36, 36, 36}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 400, 683)
// Out:    (1, 64, 400, 683)
// Operators: 'mask_rcnn_inception_v2_coco:opid11' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid11,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 400, 683}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 50, 86)
// Out:    (1, 64, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid134' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid134,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 50, 86}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 56, 56)
// Out:    (1, 64, 56, 56)
// Operators: 'resnet-50-caffe2:opid15' [FP16, FP32], 'resnet-50-caffe2:opid20' [FP16, FP32], 'resnet-50-caffe2:opid35' [FP16, FP32], 'resnet-50-caffe2:opid40' [FP16, FP32], 'resnet-50-caffe2:opid51' [FP16, FP32], 'resnet-50-caffe2:opid56' [FP16, FP32], 'resnet-50-pytorch:opid15' [FP32], 'resnet-50-pytorch:opid20' [FP32], 'resnet-50-pytorch:opid35' [FP32], 'resnet-50-pytorch:opid40' [FP32], 'resnet-50-pytorch:opid51' [FP32], 'resnet-50-pytorch:opid56' [FP32], 'resnet-50-tf:opid13' [FP16, FP32], 'resnet-50-tf:opid18' [FP16, FP32], 'resnet-50-tf:opid33' [FP16, FP32], 'resnet-50-tf:opid38' [FP16, FP32], 'resnet-50-tf:opid49' [FP16, FP32], 'resnet-50-tf:opid54' [FP16, FP32], 'squeezenet1.1:opid18' [FP16, FP32], 'squeezenet1.1:opid23' [FP16, FP32], 'squeezenet1.1:opid34' [FP16, FP32], 'squeezenet1.1:opid39' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid15,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 56, 56}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 73, 73)
// Out:    (1, 64, 73, 73)
// Operators: 'googlenet-v4-tf:opid31' [FP16, FP32], 'googlenet-v4-tf:opid41' [FP16, FP32], 'googlenet-v4-tf:opid46' [FP16, FP32], 'googlenet-v4-tf:opid51' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid31,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 73, 73}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 100, 171)
// Out:    (1, 96, 100, 171)
// Operators: 'mask_rcnn_inception_v2_coco:opid117' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid48' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid53' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid75' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid85' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid90' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid117,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 100, 171}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 35, 35)
// Out:    (1, 96, 35, 35)
// Operators: 'googlenet-v4-tf:opid100' [FP16, FP32], 'googlenet-v4-tf:opid106' [FP16, FP32], 'googlenet-v4-tf:opid116' [FP16, FP32], 'googlenet-v4-tf:opid126' [FP16, FP32], 'googlenet-v4-tf:opid131' [FP16, FP32], 'googlenet-v4-tf:opid137' [FP16, FP32], 'googlenet-v4-tf:opid143' [FP16, FP32], 'googlenet-v4-tf:opid153' [FP16, FP32], 'googlenet-v4-tf:opid163' [FP16, FP32], 'googlenet-v4-tf:opid168' [FP16, FP32], 'googlenet-v4-tf:opid174' [FP16, FP32], 'googlenet-v4-tf:opid180' [FP16, FP32], 'googlenet-v4-tf:opid190' [FP16, FP32], 'googlenet-v4-tf:opid200' [FP16, FP32], 'googlenet-v4-tf:opid205' [FP16, FP32], 'googlenet-v4-tf:opid211' [FP16, FP32], 'googlenet-v4-tf:opid69' [FP16, FP32], 'googlenet-v4-tf:opid79' [FP16, FP32], 'googlenet-v4-tf:opid89' [FP16, FP32], 'googlenet-v4-tf:opid94' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid100,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 35, 35}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 50, 86)
// Out:    (1, 96, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid122' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid139' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid144' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid171' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid181' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid234' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid240' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid271' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid122,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 50, 86}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 71, 71)
// Out:    (1, 96, 71, 71)
// Operators: 'googlenet-v4-tf:opid36' [FP16, FP32], 'googlenet-v4-tf:opid56' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid36,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 71, 71}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 73, 73)
// Out:    (1, 96, 73, 73)
// Operators: 'googlenet-v4-tf:opid25' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid25,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 73, 73}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 128, 4, 4)
// Out:    (100, 128, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid373' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid410' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid531' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid568' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid373,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 128, 4, 4}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 128, 7, 7)
// Out:    (100, 128, 7, 7)
// Operators: 'mask_rcnn_inception_v2_coco:opid315' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid473' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid315,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 128, 7, 7}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 160, 4, 4)
// Out:    (100, 160, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid357' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid515' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid357,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 160, 4, 4}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 192, 4, 4)
// Out:    (100, 192, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid320' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid347' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid384' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid394' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid478' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid505' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid542' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid552' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid320,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 192, 4, 4}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 192, 7, 7)
// Out:    (100, 192, 7, 7)
// Operators: 'mask_rcnn_inception_v2_coco:opid325' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid483' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid325,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 192, 7, 7}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 224, 4, 4)
// Out:    (100, 224, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid362' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid367' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid399' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid404' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid520' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid525' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid557' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid562' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid362,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 224, 4, 4}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 256, 15, 15)
// Out:    (100, 256, 15, 15)
// Operators: 'mask_rcnn_inception_v2_coco:opid576' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid576,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 256, 15, 15}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 256, 4, 4)
// Out:    (100, 256, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid335' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid493' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid335,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 256, 4, 4}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 256, 7, 7)
// Out:    (100, 256, 7, 7)
// Operators: 'mask_rcnn_inception_v2_coco:opid330' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid488' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid330,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 256, 7, 7}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 320, 4, 4)
// Out:    (100, 320, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid352' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid389' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid510' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid547' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid352,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 320, 4, 4}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 352, 4, 4)
// Out:    (100, 352, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid342' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid379' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid500' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid537' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid342,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 352, 4, 4}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (64, 1024)
// Out:    (64, 1024)
// Operators: 'GAN:opid33' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_GAN_opid33,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{64, 1024}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (64, 6272)
// Out:    (64, 6272)
// Operators: 'GAN:opid66' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_GAN_opid66,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{64, 6272}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (64, 64, 14, 14)
// Out:    (64, 64, 14, 14)
// Operators: 'GAN:opid96' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_GAN_opid96,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{64, 64, 14, 14}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);

// {AUTOGENERATED_TESTS_END_TAG_RELU}
// clang-format on
// =============================================================================

// =============================================================================
// clang-format off
// {AUTOGENERATED_TESTS_BEGIN_TAG_SIGMOID}

// Attrs:  {}
// In:     (1, 1, 128, 128)
// Out:    (1, 1, 128, 128)
// Operators: '2d_unet-graph-transform-cuda:opid82' [FP32], '2d_unet-graph-transform:opid123' [FP32], '2d_unet:opid263' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_2d_unet_graph_transform_cuda_opid82,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1, 128, 128}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1, 144, 144, 144)
// Out:    (1, 1, 144, 144, 144)
// Operators: '3d_unet-graph-transform-cuda:opid82' [FP32], '3d_unet-graph-transform:opid123' [FP32], '3d_unet:opid295' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_3d_unet_graph_transform_cuda_opid82,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1, 144, 144, 144}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1, 1917, 91)
// Out:    (1, 1, 1917, 91)
// Operators: 'ssd_mobilenet_v2_coco:opid420' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_ssd_mobilenet_v2_coco_opid420,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1, 1917, 91}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1152, 1, 1)
// Out:    (1, 1152, 1, 1)
// Operators: 'efficientdet-d1-tf:opid499' [FP16, FP32], 'efficientdet-d1-tf:opid527' [FP16, FP32], 'efficientdet-d1-tf:opid555' [FP16, FP32], 'efficientdet-d1-tf:opid583' [FP16, FP32], 'efficientdet-d1-tf:opid611' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid499,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1152, 1, 1}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 144, 1, 1)
// Out:    (1, 144, 1, 1)
// Operators: 'efficientdet-d1-tf:opid103' [FP16, FP32], 'efficientdet-d1-tf:opid131' [FP16, FP32], 'efficientdet-d1-tf:opid159' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid103,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 144, 1, 1}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 16, 1, 1)
// Out:    (1, 16, 1, 1)
// Operators: 'efficientdet-d1-tf:opid48' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid48,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 16, 1, 1}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1920, 1, 1)
// Out:    (1, 1920, 1, 1)
// Operators: 'efficientdet-d1-tf:opid638' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid638,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1920, 1, 1}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 240, 1, 1)
// Out:    (1, 240, 1, 1)
// Operators: 'efficientdet-d1-tf:opid186' [FP16, FP32], 'efficientdet-d1-tf:opid214' [FP16, FP32], 'efficientdet-d1-tf:opid246' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid186,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 240, 1, 1}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 3, 20, 20, 85)
// Out:    (1, 3, 20, 20, 85)
// Operators: 'yolov5-640x640-IR:opid516' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_yolov5_640x640_IR_opid516,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 3, 20, 20, 85}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 3, 40, 40, 85)
// Out:    (1, 3, 40, 40, 85)
// Operators: 'yolov5-640x640-IR:opid431' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_yolov5_640x640_IR_opid431,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 3, 40, 40, 85}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 3, 80, 80, 85)
// Out:    (1, 3, 80, 80, 85)
// Operators: 'yolov5-640x640-IR:opid346' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_yolov5_640x640_IR_opid346,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 3, 80, 80, 85}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 1, 1)
// Out:    (1, 32, 1, 1)
// Operators: 'efficientdet-d1-tf:opid26' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid26,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 1, 1}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 480, 1, 1)
// Out:    (1, 480, 1, 1)
// Operators: 'efficientdet-d1-tf:opid273' [FP16, FP32], 'efficientdet-d1-tf:opid301' [FP16, FP32], 'efficientdet-d1-tf:opid329' [FP16, FP32], 'efficientdet-d1-tf:opid357' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid273,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 480, 1, 1}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 672, 1, 1)
// Out:    (1, 672, 1, 1)
// Operators: 'efficientdet-d1-tf:opid384' [FP16, FP32], 'efficientdet-d1-tf:opid412' [FP16, FP32], 'efficientdet-d1-tf:opid440' [FP16, FP32], 'efficientdet-d1-tf:opid472' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid384,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 672, 1, 1}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 76725, 90)
// Out:    (1, 76725, 90)
// Operators: 'efficientdet-d1-tf:opid1435' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid1435,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 76725, 90}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 1, 1)
// Out:    (1, 96, 1, 1)
// Operators: 'efficientdet-d1-tf:opid76' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid76,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 1, 1}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 90, 15, 15)
// Out:    (100, 90, 15, 15)
// Operators: 'mask_rcnn_inception_v2_coco:opid581' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_mask_rcnn_inception_v2_coco_opid581,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 90, 15, 15}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (64, 1, 28, 28)
// Out:    (64, 1, 28, 28)
// Operators: 'GAN:opid102' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_GAN_opid102,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{64, 1, 28, 28}, 0}),
        ::testing::Values(CommonTestUtils::DEVICE_CUDA)),
    ActivationLayerTest::getTestCaseName);

// {AUTOGENERATED_TESTS_END_TAG_SIGMOID}
// clang-format on
// =============================================================================

std::initializer_list<std::initializer_list<std::size_t>> tanhShapes{
    {1, 100, 128},
    {1, 512, 1000},
    {1, 800},
    {64, 128, 64},
    {64, 64, 128},
    {64, 64, 256, 2},
};

auto listToVectors(const std::initializer_list<std::initializer_list<std::size_t>>& list) {
    // pair of {input shape, unused}
    std::vector<std::pair<std::vector<size_t>, std::vector<size_t>>> shapes;
    shapes.reserve(list.size());
    for (auto& e : list) shapes.emplace_back(e, 0);
    return shapes;
}

const auto basicTanhCases = ::testing::Combine(
    ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
    ::testing::Values(InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16),
    ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
    ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
    ::testing::Values(InferenceEngine::Layout::ANY),
    ::testing::Values(InferenceEngine::Layout::ANY),
    ::testing::ValuesIn(listToVectors(tanhShapes)),
    ::testing::Values(CommonTestUtils::DEVICE_CUDA));

INSTANTIATE_TEST_CASE_P(smoke_Activation_Basic_Tanh,
                        ActivationLayerTest,
                        basicTanhCases,
                        ActivationLayerTest::getTestCaseName);

}  // namespace
}  // namespace LayerTestsDefinitions
