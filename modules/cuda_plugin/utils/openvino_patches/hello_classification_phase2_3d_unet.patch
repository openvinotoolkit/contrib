diff --git a/inference-engine/samples/hello_classification/CMakeLists.txt b/inference-engine/samples/hello_classification/CMakeLists.txt
index 303f54bb8..0e17d6188 100644
--- a/inference-engine/samples/hello_classification/CMakeLists.txt
+++ b/inference-engine/samples/hello_classification/CMakeLists.txt
@@ -3,5 +3,8 @@
 #
 
 ie_add_sample(NAME hello_classification
-              SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/main.cpp"
+              SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/main.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/nii_file_utils.cc"
+                  "${CMAKE_CURRENT_SOURCE_DIR}/nii_file_utils.hh"
               OPENCV_DEPENDENCIES imgcodecs)
+
+add_dependencies(hello_classification CUDAPlugin)
diff --git a/inference-engine/samples/hello_classification/main.cpp b/inference-engine/samples/hello_classification/main.cpp
index 11be6821d..a23d6e915 100644
--- a/inference-engine/samples/hello_classification/main.cpp
+++ b/inference-engine/samples/hello_classification/main.cpp
@@ -11,6 +11,9 @@
 #include <inference_engine.hpp>
 #include <samples/ocv_common.hpp>
 #include <samples/classification_results.h>
+#include <iostream>
+
+#include "nii_file_utils.hh"
 
 using namespace InferenceEngine;
 
@@ -23,6 +26,7 @@ using namespace InferenceEngine;
 #define tcout std::cout
 #define file_name_t std::string
 #define imread_t cv::imread
+#define imread_grayscale_t(image_path) cv::imread(image_path, cv::IMREAD_GRAYSCALE)
 #define ClassificationResult_t ClassificationResult
 #endif
 
@@ -64,24 +68,45 @@ std::string simpleConvert(const std::wstring & wstr) {
 int wmain(int argc, wchar_t *argv[]) {
 #else
 
+static UNUSED InferenceEngine::Blob::Ptr create3DMat2Blob(const cv::Mat &mat) {
+    InferenceEngine::TensorDesc tDesc(InferenceEngine::Precision::FP32,
+                                      {1, 1, kImageShapeSize, kImageShapeSize, kImageShapeSize},
+                                      InferenceEngine::Layout::NCDHW);
+
+    return InferenceEngine::make_shared_blob<float>(tDesc, reinterpret_cast<float*>(mat.data));
+}
+
+std::vector<cv::Mat> get_images(const std::string & nii_file_name);
+void write_images_to_files(const std::string & prefix, std::vector<cv::Mat> & images, size_t max_size);
+void normalize_images(std::vector<cv::Mat> & images);
+
 int main(int argc, char *argv[]) {
 #endif
     try {
-        // ------------------------------ Parsing and validation of input args ---------------------------------
-        if (argc != 4) {
-            tcout << "Usage : " << argv[0] << " <path_to_model> <path_to_image> <device_name>" << std::endl;
+        // ------------------------------ Parsing and validation of input arguments
+        // ---------------------------------
+        if ( argc != 4 ) {
+            std::cout << "Usage : " << argv[0] << " <path_to_model> <path_to_nii_image> <device_name>" << std::endl;
             return EXIT_FAILURE;
         }
-
         const file_name_t input_model{argv[1]};
-        const file_name_t input_image_path{argv[2]};
-#if defined(ENABLE_UNICODE_PATH_SUPPORT) && defined(_WIN32)
-        const std::string device_name = simpleConvert(argv[3]);
-#else
-        const std::string device_name{argv[3]};
-#endif
-        // -----------------------------------------------------------------------------------------------------
 
+        std::string nii_images_file = argv[2];
+        std::vector<cv::Mat> images = get_images(nii_images_file);
+        write_images_to_files("input", images, kImageShapeSize);
+        normalize_images(images);
+        static constexpr int image_size = kImageShapeSize * kImageShapeSize;
+        int shapes[] = {kImageShapeSize, image_size};
+        cv::Mat united_image(2, shapes, CV_32FC1);
+        for (int i = 0; i < kImageShapeSize; ++i) {
+            for (size_t j = 0; j < images[i].total(); ++j) {
+                united_image.at<float>(i, j) = images[i].at<float>(j);
+            }
+        }
+        united_image = united_image.t();
+
+        std::string device_name = argv[3];
+        // -----------------------------------------------------------------------------------------------------
         // --------------------------- 1. Load inference engine instance -------------------------------------
         Core ie;
         // -----------------------------------------------------------------------------------------------------
@@ -100,9 +125,10 @@ int main(int argc, char *argv[]) {
         /* Mark input as resizable by setting of a resize algorithm.
          * In this case we will be able to set an input blob of any shape to an infer request.
          * Resize and layout conversions are executed automatically during inference */
-        input_info->getPreProcess().setResizeAlgorithm(RESIZE_BILINEAR);
-        input_info->setLayout(Layout::NHWC);
-        input_info->setPrecision(Precision::U8);
+        input_info->getPreProcess().setResizeAlgorithm(NO_RESIZE);
+        input_info->getPreProcess().setColorFormat(ColorFormat::RAW);
+        input_info->setLayout(Layout::NCDHW);
+        input_info->setPrecision(Precision::FP32);
 
         // --------------------------- Prepare output blobs ----------------------------------------------------
         DataPtr output_info = network.getOutputsInfo().begin()->second;
@@ -110,19 +136,21 @@ int main(int argc, char *argv[]) {
 
         output_info->setPrecision(Precision::FP32);
         // -----------------------------------------------------------------------------------------------------
-
-        // --------------------------- 4. Loading model to the device ------------------------------------------
-        ExecutableNetwork executable_network = ie.LoadNetwork(network, device_name);
+        // --------------------------- Step 4. Loading a model to the device
+        // ------------------------------------------
+        ExecutableNetwork executable_network =
+                device_name == "CUDA" ? ie.LoadNetwork(network, device_name,
+                                        {
+                                            {{"CUDA_THROUGHPUT_STREAMS", "1"}},
+                                        })
+                                      : ie.LoadNetwork(network, device_name);
         // -----------------------------------------------------------------------------------------------------
-
         // --------------------------- 5. Create infer request -------------------------------------------------
         InferRequest infer_request = executable_network.CreateInferRequest();
         // -----------------------------------------------------------------------------------------------------
-
         // --------------------------- 6. Prepare input --------------------------------------------------------
         /* Read input image to a blob and set it to an infer request without resize and layout conversions. */
-        cv::Mat image = imread_t(input_image_path);
-        Blob::Ptr imgBlob = wrapMat2Blob(image);  // just wrap Mat data by Blob::Ptr without allocating of new memory
+        Blob::Ptr imgBlob = create3DMat2Blob(united_image);
         infer_request.SetBlob(input_name, imgBlob);  // infer_request accepts input blob of any size
         // -----------------------------------------------------------------------------------------------------
 
@@ -133,9 +161,20 @@ int main(int argc, char *argv[]) {
 
         // --------------------------- 8. Process output ------------------------------------------------------
         Blob::Ptr output = infer_request.GetBlob(output_name);
-        // Print classification results
-        ClassificationResult_t classificationResult(output, {input_image_path});
-        classificationResult.print();
+        auto outputBuffer = output->buffer();
+        // Save image to file
+        int output_shapes[] = {image_size, kImageShapeSize};
+        cv::Mat results(2, output_shapes, CV_32FC1, outputBuffer.as<float*>());
+        results = results.t();
+        std::vector<cv::Mat> result_images;
+        for (int i = 0 ; i < kImageShapeSize; ++i) {
+            float * pointer = reinterpret_cast<float*>(results.data) + i * image_size;
+            cv::Mat res_image(kImageShapeSize, kImageShapeSize, CV_32FC1, pointer);
+            res_image = res_image * 255.0f;
+            result_images.push_back(res_image);
+        }
+        write_images_to_files("output", result_images, kImageShapeSize);
+
         // -----------------------------------------------------------------------------------------------------
     } catch (const std::exception & ex) {
         std::cerr << ex.what() << std::endl;
diff --git a/inference-engine/samples/hello_classification/nii_file_utils.cc b/inference-engine/samples/hello_classification/nii_file_utils.cc
new file mode 100644
index 000000000..5a6bc9756
--- /dev/null
+++ b/inference-engine/samples/hello_classification/nii_file_utils.cc
@@ -0,0 +1,282 @@
+// Copyright (C) 2018-2020 Intel Corporation
+// SPDX-License-Identifier: Apache-2.0
+//
+#include <fstream>
+#include <iostream>
+#include <vector>
+#include <string>
+#include <iterator>
+#include <algorithm>
+#include <iterator>
+#include <algorithm>
+#include <opencv2/imgcodecs.hpp>
+#include "nii_file_utils.hh"
+
+using namespace std;
+
+#include <opencv2/opencv.hpp>
+using namespace cv;
+
+std::vector<cv::Mat> get_images(const std::string & nii_file_name) {
+    // https://brainder.org/2012/09/23/the-nifti-file-format/
+    ifstream infile(nii_file_name, std::ios::binary);
+
+    if (infile.fail())
+        throw std::runtime_error(std::string("Could not read file ") + nii_file_name);
+
+    size_t bytes_read = 0;
+    int sizeof_header;
+    infile.read(reinterpret_cast<char*>(&sizeof_header), sizeof(sizeof_header));
+    bytes_read += infile.gcount();
+    if (sizeof_header != 348)
+        throw std::runtime_error("Invalid header size: should be 348 bytes");
+
+    char data_type[10];
+    infile.read(reinterpret_cast<char*>(&data_type), sizeof(data_type));
+    bytes_read += infile.gcount();
+
+    char db_name[18];
+    infile.read(reinterpret_cast<char*>(&db_name), sizeof(db_name));
+    bytes_read += infile.gcount();
+
+    int extents;
+    infile.read(reinterpret_cast<char*>(&extents), sizeof(extents));
+    bytes_read += infile.gcount();
+
+    short session_error;
+    infile.read(reinterpret_cast<char*>(&session_error), sizeof(session_error));
+    bytes_read += infile.gcount();
+
+    char regular;
+    infile.read(reinterpret_cast<char*>(&regular), sizeof(regular));
+    bytes_read += infile.gcount();
+
+    char dim_info;
+    infile.read(reinterpret_cast<char*>(&dim_info), sizeof(dim_info));
+    bytes_read += infile.gcount();
+
+    short dim[8];
+    infile.read(reinterpret_cast<char*>(&dim), sizeof(dim));
+    bytes_read += infile.gcount();
+
+    float intent_p1;
+    infile.read(reinterpret_cast<char*>(&intent_p1), sizeof(intent_p1));
+    bytes_read += infile.gcount();
+
+    float intent_p2;
+    infile.read(reinterpret_cast<char*>(&intent_p2), sizeof(intent_p2));
+    bytes_read += infile.gcount();
+
+    float intent_p3;
+    infile.read(reinterpret_cast<char*>(&intent_p3), sizeof(intent_p3));
+    bytes_read += infile.gcount();
+
+    short intent_code;
+    infile.read(reinterpret_cast<char*>(&intent_code), sizeof(intent_code));
+    bytes_read += infile.gcount();
+
+    short datatype;
+    infile.read(reinterpret_cast<char*>(&datatype), sizeof(datatype));
+    bytes_read += infile.gcount();
+
+    if (datatype != 16)
+        throw std::runtime_error("Data type must be float");
+
+    short bitpix;
+    infile.read(reinterpret_cast<char*>(&bitpix), sizeof(bitpix));
+    bytes_read += infile.gcount();
+
+    if (bitpix != 32)
+        throw std::runtime_error("Data type must be float");
+
+    short slice_start;
+    infile.read(reinterpret_cast<char*>(&slice_start), sizeof(slice_start));
+    bytes_read += infile.gcount();
+
+    float pixdim[8];
+    infile.read(reinterpret_cast<char*>(&pixdim), sizeof(pixdim));
+    bytes_read += infile.gcount();
+
+    float vox_offset;
+    infile.read(reinterpret_cast<char*>(&vox_offset), sizeof(vox_offset));
+    bytes_read += infile.gcount();
+
+    float scl_slope;
+    infile.read(reinterpret_cast<char*>(&scl_slope), sizeof(scl_slope));
+    bytes_read += infile.gcount();
+
+    float scl_inter;
+    infile.read(reinterpret_cast<char*>(&scl_inter), sizeof(scl_inter));
+    bytes_read += infile.gcount();
+
+    short slice_end;
+    infile.read(reinterpret_cast<char*>(&slice_end), sizeof(slice_end));
+    bytes_read += infile.gcount();
+
+    char slice_code;
+    infile.read(reinterpret_cast<char*>(&slice_code), sizeof(slice_code));
+    bytes_read += infile.gcount();
+
+    char xyzt_units;
+    infile.read(reinterpret_cast<char*>(&xyzt_units), sizeof(xyzt_units));
+    bytes_read += infile.gcount();
+
+    float cal_max;
+    infile.read(reinterpret_cast<char*>(&cal_max), sizeof(cal_max));
+    bytes_read += infile.gcount();
+
+    float cal_min;
+    infile.read(reinterpret_cast<char*>(&cal_min), sizeof(cal_min));
+    bytes_read += infile.gcount();
+
+    float slice_duration;
+    infile.read(reinterpret_cast<char*>(&slice_duration), sizeof(slice_duration));
+    bytes_read += infile.gcount();
+
+    float toffset;
+    infile.read(reinterpret_cast<char*>(&toffset), sizeof(toffset));
+    bytes_read += infile.gcount();
+
+    int glmax;
+    infile.read(reinterpret_cast<char*>(&glmax), sizeof(glmax));
+    bytes_read += infile.gcount();
+
+    int glmin;
+    infile.read(reinterpret_cast<char*>(&glmin), sizeof(glmin));
+    bytes_read += infile.gcount();
+
+    char descrip[80];
+    infile.read(reinterpret_cast<char*>(&descrip), sizeof(descrip));
+    bytes_read += infile.gcount();
+
+    char aux_file[24];
+    infile.read(reinterpret_cast<char*>(&aux_file), sizeof(aux_file));
+    bytes_read += infile.gcount();
+
+    short qform_code;
+    infile.read(reinterpret_cast<char*>(&qform_code), sizeof(qform_code));
+    bytes_read += infile.gcount();
+
+    short sform_code;
+    infile.read(reinterpret_cast<char*>(&sform_code), sizeof(sform_code));
+    bytes_read += infile.gcount();
+
+    float quatern_b;
+    infile.read(reinterpret_cast<char*>(&quatern_b), sizeof(quatern_b));
+    bytes_read += infile.gcount();
+
+    float quatern_c;
+    infile.read(reinterpret_cast<char*>(&quatern_c), sizeof(quatern_c));
+    bytes_read += infile.gcount();
+
+    float quatern_d;
+    infile.read(reinterpret_cast<char*>(&quatern_d), sizeof(quatern_d));
+    bytes_read += infile.gcount();
+
+    float qoffset_x;
+    infile.read(reinterpret_cast<char*>(&qoffset_x), sizeof(qoffset_x));
+    bytes_read += infile.gcount();
+
+    float qoffset_y;
+    infile.read(reinterpret_cast<char*>(&qoffset_y), sizeof(qoffset_y));
+    bytes_read += infile.gcount();
+
+    float qoffset_z;
+    infile.read(reinterpret_cast<char*>(&qoffset_z), sizeof(qoffset_z));
+    bytes_read += infile.gcount();
+
+    float srow_x[4];
+    infile.read(reinterpret_cast<char*>(&srow_x), sizeof(srow_x));
+    bytes_read += infile.gcount();
+
+    float srow_y[4];
+    infile.read(reinterpret_cast<char*>(&srow_y), sizeof(srow_y));
+    bytes_read += infile.gcount();
+
+    float srow_z[4];
+    infile.read(reinterpret_cast<char*>(&srow_z), sizeof(srow_z));
+    bytes_read += infile.gcount();
+
+    char intent_name[16];
+    infile.read(reinterpret_cast<char*>(&intent_name), sizeof(intent_name));
+    bytes_read += infile.gcount();
+
+    char magic[4];
+    infile.read(reinterpret_cast<char*>(&magic), sizeof(magic));
+    bytes_read += infile.gcount();
+
+    if (bytes_read != 348)
+        throw std::runtime_error("Error reading header");
+
+    long unsigned int num_voxels = dim[1] * dim[2] * dim[3] * dim[4] * dim[5] * dim[6] * dim[7];
+
+    vector<float> data(num_voxels, 0);
+    infile.read(reinterpret_cast<char*>(&data[0]), sizeof(float)*num_voxels);
+    bytes_read = infile.gcount();
+
+    auto result = std::minmax_element(begin(data), end(data));
+    cal_max = cal_max > 0 ? cal_max : *result.second;
+
+    if (bytes_read != sizeof(float)*num_voxels)
+        throw std::runtime_error("Error reading file");
+
+    int start_pos = (dim[2] - kImageShapeSize) / 2;
+    int end_pos = start_pos + kImageShapeSize;
+    std::vector<Mat> images;
+    for (int i = 0; i < dim[7]; i++) {
+        for (int j = 0; j < dim[6]; j++) {
+            for (int k = 0; k < dim[5]; k++) {
+                // for (int l = 0; l < dim[4]; l++)
+                for (int l = 0; l < 1; l++) {
+                    std::string tiff_file = "output.tiff";
+                    //for (int m = 0; m < dim[3]; m++) {
+                    assert(dim[3] >= kImageShapeSize);
+                    for (int m = i; m < kImageShapeSize; m++) {
+                        //Mat img = Mat::zeros(Size(dim[1], dim[2]), CV_8UC3);
+                        Mat img(Size(dim[1], dim[2]), CV_32FC1);
+                        for (int n = 0; n < dim[2]; n++) {
+                            for (int o = 0; o < dim[1]; o++) {
+                                size_t index = i*dim[6] * dim[5] * dim[4] * dim[3] * dim[2] * dim[1];
+                                      index += j*dim[5] * dim[4] * dim[3] * dim[2] * dim[1];
+                                      index += k*dim[4] * dim[3] * dim[2] * dim[1];
+                                      index += l*dim[3] * dim[2] * dim[1];
+                                      index += m*dim[2] * dim[1];
+                                      index += n*dim[1];
+                                      index += o;
+
+                                float f = data[index];
+                                img.at<float>(n, o) = static_cast<unsigned char>(f/cal_max *255.0f);
+                            }
+                        }
+                        Mat img_cropped = img(Range(start_pos, end_pos), Range(start_pos, end_pos));
+                        images.push_back(img_cropped);
+                    }
+                }
+            }
+        }
+    }
+    return images;
+}
+
+void write_images_to_files(const std::string & prefix, std::vector<cv::Mat> & images, size_t max_number) {
+    for (size_t i = 0; i < kImageShapeSize; ++i) {
+        ostringstream oss;
+        oss << prefix << "_" << std::setfill('0') << std::setw(4) << i << ".bmp";
+        auto f = oss.str();
+        cv::imwrite(f, images[i]);
+    }
+}
+
+void normalize_images(std::vector<cv::Mat> & images) {
+    for (auto & image : images) {
+        cv::Scalar mean, stddev;
+        cv::meanStdDev(image, mean, stddev);
+        for (size_t i = 0; i < image.total(); ++i) {
+            if (stddev.val[0] > 0 )
+                image.at<float>(i) = (image.at<float>(i) - static_cast<float>(mean.val[0])) / static_cast<float>(stddev.val[0]);
+            else
+                image.at<float>(i) = 0.0f;
+        }
+    }
+}
+
diff --git a/inference-engine/samples/hello_classification/nii_file_utils.hh b/inference-engine/samples/hello_classification/nii_file_utils.hh
new file mode 100644
index 000000000..87d6df0ea
--- /dev/null
+++ b/inference-engine/samples/hello_classification/nii_file_utils.hh
@@ -0,0 +1,15 @@
+// Copyright (C) 2018-2021 Intel Corporation
+// SPDX-License-Identifier: Apache-2.0
+//
+
+#pragma once
+
+#include <samples/ocv_common.hpp>
+#include <vector>
+#include <string>
+
+static constexpr auto kImageShapeSize = 64;
+
+std::vector<cv::Mat> get_images(const std::string & nii_file_name);
+void write_images_to_files(const std::string & prefix, std::vector<cv::Mat> & images, size_t max_size);
+void normalize_images(std::vector<cv::Mat> & images);
* Unmerged path inference-engine/thirdparty/ade
