// Copyright (C) 2022-2023 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#include <cuda_test_constants.hpp>
#include <vector>

#include "common_test_utils/test_constants.hpp"
#include "finite_comparer.hpp"
#include "single_layer_tests/group_convolution.hpp"

using namespace LayerTestsDefinitions;

namespace LayerTestsDefinitions {

class GroupConvolutionLayerThresholdTest : public FiniteComparer<GroupConvolutionLayerTest> {
protected:
    void SetUp() override {
        GroupConvolutionLayerTest::SetUp();

        auto params = this->GetParam();
        auto netPrecision = std::get<1>(params);
        if (netPrecision.getPrecVal() == InferenceEngine::Precision::FP16) {
            this->threshold = 500;
            this->infinity_value = std::numeric_limits<std::uint16_t>::max();
        }
    }
};

TEST_P(GroupConvolutionLayerThresholdTest, CompareWithRefs) {
    SKIP_IF_CURRENT_TEST_IS_DISABLED()

    auto params = GetParam();
    inPrc = std::get<2>(params);
    outPrc = std::get<3>(params);

    Run();
}

}  // namespace LayerTestsDefinitions

namespace {

// =============================================================================
// clang-format off
// {AUTOGENERATED_TESTS_BEGIN_TAG}

// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 144, 75, 75), (144, 1, 1, 3, 3)
// Out:    (1, 144, 75, 75)
// Operators: 'ssd_mobilenet_v2_coco:opid39' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid39,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(144), // Num out channels
            ::testing::Values(144), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 144, 75, 75})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 192, 38, 38), (192, 1, 1, 3, 3)
// Out:    (1, 192, 38, 38)
// Operators: 'ssd_mobilenet_v2_coco:opid68' [FP32], 'ssd_mobilenet_v2_coco:opid83' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid68,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(192), // Num out channels
            ::testing::Values(192), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 192, 38, 38})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 32, 150, 150), (32, 1, 1, 3, 3)
// Out:    (1, 32, 150, 150)
// Operators: 'ssd_mobilenet_v2_coco:opid11' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid11,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(32), // Num out channels
            ::testing::Values(32), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 32, 150, 150})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 384, 19, 19), (384, 1, 1, 3, 3)
// Out:    (1, 384, 19, 19)
// Operators: 'ssd_mobilenet_v2_coco:opid112' [FP32], 'ssd_mobilenet_v2_coco:opid127' [FP32], 'ssd_mobilenet_v2_coco:opid142' [FP32], 'ssd_mobilenet_v2_coco:opid157' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid112,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(384), // Num out channels
            ::testing::Values(384), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 384, 19, 19})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 576, 19, 19), (576, 1, 1, 3, 3)
// Out:    (1, 576, 19, 19)
// Operators: 'ssd_mobilenet_v2_coco:opid171' [FP32], 'ssd_mobilenet_v2_coco:opid186' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid171,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(576), // Num out channels
            ::testing::Values(576), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 576, 19, 19})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 960, 10, 10), (960, 1, 1, 3, 3)
// Out:    (1, 960, 10, 10)
// Operators: 'ssd_mobilenet_v2_coco:opid223' [FP32], 'ssd_mobilenet_v2_coco:opid238' [FP32], 'ssd_mobilenet_v2_coco:opid253' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid223,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(960), // Num out channels
            ::testing::Values(960), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 960, 10, 10})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 128, 3, 3), (128, 1, 1, 3, 3)
// Out:    (1, 128, 2, 2)
// Operators: 'ssd_mobilenet_v2_coco:opid326' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid326,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(128), // Num out channels
            ::testing::Values(128), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 128, 3, 3})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 128, 5, 5), (128, 1, 1, 3, 3)
// Out:    (1, 128, 3, 3)
// Operators: 'ssd_mobilenet_v2_coco:opid303' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid303,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(128), // Num out channels
            ::testing::Values(128), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 128, 5, 5})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 144, 75, 75), (144, 1, 1, 3, 3)
// Out:    (1, 144, 38, 38)
// Operators: 'ssd_mobilenet_v2_coco:opid54' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid54,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(144), // Num out channels
            ::testing::Values(144), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 144, 75, 75})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 192, 38, 38), (192, 1, 1, 3, 3)
// Out:    (1, 192, 19, 19)
// Operators: 'ssd_mobilenet_v2_coco:opid98' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid98,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(192), // Num out channels
            ::testing::Values(192), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 192, 38, 38})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 256, 10, 10), (256, 1, 1, 3, 3)
// Out:    (1, 256, 5, 5)
// Operators: 'ssd_mobilenet_v2_coco:opid280' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid280,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(256), // Num out channels
            ::testing::Values(256), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 256, 10, 10})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 576, 19, 19), (576, 1, 1, 3, 3)
// Out:    (1, 576, 10, 10)
// Operators: 'ssd_mobilenet_v2_coco:opid209' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid209,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(576), // Num out channels
            ::testing::Values(576), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 576, 19, 19})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 64, 2, 2), (64, 1, 1, 3, 3)
// Out:    (1, 64, 1, 1)
// Operators: 'ssd_mobilenet_v2_coco:opid349' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid349,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(64), // Num out channels
            ::testing::Values(64), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 64, 2, 2})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 96, 150, 150), (96, 1, 1, 3, 3)
// Out:    (1, 96, 75, 75)
// Operators: 'ssd_mobilenet_v2_coco:opid25' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_ssd_mobilenet_v2_coco_opid25,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(96), // Num out channels
            ::testing::Values(96), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 96, 150, 150})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 1152, 20, 20), (1152, 1, 1, 3, 3)
// Out:    (1, 1152, 20, 20)
// Operators: 'efficientdet-d1-tf:opid596' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid596,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(1152), // Num out channels
            ::testing::Values(1152), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 1152, 20, 20})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 1152, 20, 20), (1152, 1, 1, 5, 5)
// Out:    (1, 1152, 20, 20)
// Operators: 'efficientdet-d1-tf:opid484' [FP32], 'efficientdet-d1-tf:opid512' [FP32], 'efficientdet-d1-tf:opid540' [FP32], 'efficientdet-d1-tf:opid568' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid484,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({5, 5})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(1152), // Num out channels
            ::testing::Values(1152), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 1152, 20, 20})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 144, 160, 160), (144, 1, 1, 3, 3)
// Out:    (1, 144, 160, 160)
// Operators: 'efficientdet-d1-tf:opid116' [FP32], 'efficientdet-d1-tf:opid88' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid116,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(144), // Num out channels
            ::testing::Values(144), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 144, 160, 160})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 16, 320, 320), (16, 1, 1, 3, 3)
// Out:    (1, 16, 320, 320)
// Operators: 'efficientdet-d1-tf:opid33' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid33,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(16), // Num out channels
            ::testing::Values(16), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 16, 320, 320})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 1920, 20, 20), (1920, 1, 1, 3, 3)
// Out:    (1, 1920, 20, 20)
// Operators: 'efficientdet-d1-tf:opid623' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid623,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(1920), // Num out channels
            ::testing::Values(1920), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 1920, 20, 20})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 240, 80, 80), (240, 1, 1, 5, 5)
// Out:    (1, 240, 80, 80)
// Operators: 'efficientdet-d1-tf:opid171' [FP32], 'efficientdet-d1-tf:opid199' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid171,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({5, 5})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(240), // Num out channels
            ::testing::Values(240), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 240, 80, 80})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 32, 320, 320), (32, 1, 1, 3, 3)
// Out:    (1, 32, 320, 320)
// Operators: 'efficientdet-d1-tf:opid11' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid11,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(32), // Num out channels
            ::testing::Values(32), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 32, 320, 320})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 480, 40, 40), (480, 1, 1, 3, 3)
// Out:    (1, 480, 40, 40)
// Operators: 'efficientdet-d1-tf:opid258' [FP32], 'efficientdet-d1-tf:opid286' [FP32], 'efficientdet-d1-tf:opid314' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid258,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(480), // Num out channels
            ::testing::Values(480), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 480, 40, 40})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 480, 40, 40), (480, 1, 1, 5, 5)
// Out:    (1, 480, 40, 40)
// Operators: 'efficientdet-d1-tf:opid342' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid342,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({5, 5})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(480), // Num out channels
            ::testing::Values(480), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 480, 40, 40})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 672, 40, 40), (672, 1, 1, 5, 5)
// Out:    (1, 672, 40, 40)
// Operators: 'efficientdet-d1-tf:opid369' [FP32], 'efficientdet-d1-tf:opid397' [FP32], 'efficientdet-d1-tf:opid425' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid369,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({5, 5})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(672), // Num out channels
            ::testing::Values(672), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 672, 40, 40})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 88, 10, 10), (88, 1, 1, 3, 3)
// Out:    (1, 88, 10, 10)
// Operators: 'efficientdet-d1-tf:opid1019' [FP32], 'efficientdet-d1-tf:opid1196' [FP32], 'efficientdet-d1-tf:opid1202' [FP32], 'efficientdet-d1-tf:opid1209' [FP32], 'efficientdet-d1-tf:opid1216' [FP32], 'efficientdet-d1-tf:opid1223' [FP32], 'efficientdet-d1-tf:opid1373' [FP32], 'efficientdet-d1-tf:opid1380' [FP32], 'efficientdet-d1-tf:opid1387' [FP32], 'efficientdet-d1-tf:opid1394' [FP32], 'efficientdet-d1-tf:opid664' [FP32], 'efficientdet-d1-tf:opid758' [FP32], 'efficientdet-d1-tf:opid785' [FP32], 'efficientdet-d1-tf:opid875' [FP32], 'efficientdet-d1-tf:opid902' [FP32], 'efficientdet-d1-tf:opid992' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid1019,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(88), // Num out channels
            ::testing::Values(88), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 88, 10, 10})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 88, 20, 20), (88, 1, 1, 3, 3)
// Out:    (1, 88, 20, 20)
// Operators: 'efficientdet-d1-tf:opid1031' [FP32], 'efficientdet-d1-tf:opid1149' [FP32], 'efficientdet-d1-tf:opid1155' [FP32], 'efficientdet-d1-tf:opid1162' [FP32], 'efficientdet-d1-tf:opid1169' [FP32], 'efficientdet-d1-tf:opid1176' [FP32], 'efficientdet-d1-tf:opid1342' [FP32], 'efficientdet-d1-tf:opid1349' [FP32], 'efficientdet-d1-tf:opid1356' [FP32], 'efficientdet-d1-tf:opid1363' [FP32], 'efficientdet-d1-tf:opid676' [FP32], 'efficientdet-d1-tf:opid740' [FP32], 'efficientdet-d1-tf:opid797' [FP32], 'efficientdet-d1-tf:opid857' [FP32], 'efficientdet-d1-tf:opid914' [FP32], 'efficientdet-d1-tf:opid974' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid1031,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(88), // Num out channels
            ::testing::Values(88), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 88, 20, 20})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 88, 40, 40), (88, 1, 1, 3, 3)
// Out:    (1, 88, 40, 40)
// Operators: 'efficientdet-d1-tf:opid1043' [FP32], 'efficientdet-d1-tf:opid1102' [FP32], 'efficientdet-d1-tf:opid1108' [FP32], 'efficientdet-d1-tf:opid1115' [FP32], 'efficientdet-d1-tf:opid1122' [FP32], 'efficientdet-d1-tf:opid1129' [FP32], 'efficientdet-d1-tf:opid1311' [FP32], 'efficientdet-d1-tf:opid1318' [FP32], 'efficientdet-d1-tf:opid1325' [FP32], 'efficientdet-d1-tf:opid1332' [FP32], 'efficientdet-d1-tf:opid688' [FP32], 'efficientdet-d1-tf:opid720' [FP32], 'efficientdet-d1-tf:opid809' [FP32], 'efficientdet-d1-tf:opid839' [FP32], 'efficientdet-d1-tf:opid926' [FP32], 'efficientdet-d1-tf:opid956' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid1043,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(88), // Num out channels
            ::testing::Values(88), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 88, 40, 40})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 88, 5, 5), (88, 1, 1, 3, 3)
// Out:    (1, 88, 5, 5)
// Operators: 'efficientdet-d1-tf:opid1007' [FP32], 'efficientdet-d1-tf:opid1240' [FP32], 'efficientdet-d1-tf:opid1246' [FP32], 'efficientdet-d1-tf:opid1253' [FP32], 'efficientdet-d1-tf:opid1260' [FP32], 'efficientdet-d1-tf:opid1267' [FP32], 'efficientdet-d1-tf:opid1404' [FP32], 'efficientdet-d1-tf:opid1411' [FP32], 'efficientdet-d1-tf:opid1418' [FP32], 'efficientdet-d1-tf:opid1425' [FP32], 'efficientdet-d1-tf:opid773' [FP32], 'efficientdet-d1-tf:opid890' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid1007,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(88), // Num out channels
            ::testing::Values(88), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 88, 5, 5})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '1,1'}
// In:     (1, 88, 80, 80), (88, 1, 1, 3, 3)
// Out:    (1, 88, 80, 80)
// Operators: 'efficientdet-d1-tf:opid1055' [FP32], 'efficientdet-d1-tf:opid1061' [FP32], 'efficientdet-d1-tf:opid1068' [FP32], 'efficientdet-d1-tf:opid1075' [FP32], 'efficientdet-d1-tf:opid1082' [FP32], 'efficientdet-d1-tf:opid1280' [FP32], 'efficientdet-d1-tf:opid1287' [FP32], 'efficientdet-d1-tf:opid1294' [FP32], 'efficientdet-d1-tf:opid1301' [FP32], 'efficientdet-d1-tf:opid700' [FP32], 'efficientdet-d1-tf:opid821' [FP32], 'efficientdet-d1-tf:opid938' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid1055,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({1, 1})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(88), // Num out channels
            ::testing::Values(88), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 88, 80, 80})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 144, 160, 160), (144, 1, 1, 5, 5)
// Out:    (1, 144, 80, 80)
// Operators: 'efficientdet-d1-tf:opid144' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid144,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({5, 5})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(144), // Num out channels
            ::testing::Values(144), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 144, 160, 160})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 240, 80, 80), (240, 1, 1, 3, 3)
// Out:    (1, 240, 40, 40)
// Operators: 'efficientdet-d1-tf:opid231' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid231,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(240), // Num out channels
            ::testing::Values(240), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 240, 80, 80})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 672, 40, 40), (672, 1, 1, 5, 5)
// Out:    (1, 672, 20, 20)
// Operators: 'efficientdet-d1-tf:opid457' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid457,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({5, 5})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(672), // Num out channels
            ::testing::Values(672), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 672, 40, 40})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);


// Attrs:  {'auto_pad': 'same_upper', 'dilations': '1,1', 'output_padding': '0,0', 'pads_begin': '0,0', 'pads_end': '0,0', 'strides': '2,2'}
// In:     (1, 96, 320, 320), (96, 1, 1, 3, 3)
// Out:    (1, 96, 160, 160)
// Operators: 'efficientdet-d1-tf:opid61' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_GroupConvolution_efficientdet_d1_tf_opid61,
    GroupConvolutionLayerThresholdTest,
    ::testing::Combine(
        ::testing::Combine(
            ::testing::Values(std::vector<size_t>({3, 3})), // kernel
            ::testing::Values(std::vector<size_t>({2, 2})), // strides
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_begin
            ::testing::Values(std::vector<ptrdiff_t>({0, 0})), // pads_end
            ::testing::Values(std::vector<size_t>({1, 1})), // dilations
            ::testing::Values(96), // Num out channels
            ::testing::Values(96), // Groups
            ::testing::Values(ov::op::PadType::SAME_UPPER)), // Padding type
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})), // Net precisions
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Input precision
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED), // Output precision
        ::testing::Values(InferenceEngine::Layout::ANY), // Input layout
        ::testing::Values(InferenceEngine::Layout::ANY), // Output layout
        ::testing::Values(std::vector<size_t>({1, 96, 320, 320})), // Input shape
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    GroupConvolutionLayerThresholdTest::getTestCaseName);

// {AUTOGENERATED_TESTS_END_TAG}
// clang-format on
// =============================================================================

}  // namespace
