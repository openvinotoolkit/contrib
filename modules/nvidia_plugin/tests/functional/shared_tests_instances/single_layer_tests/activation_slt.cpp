// Copyright (C) 2021-2023 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#include <ie_blob.h>

#include <algorithm>
#include <cancellation_token.hpp>
#include <chrono>
#include <cuda/device_pointers.hpp>
#include <cuda/runtime.hpp>
#include <cuda_creation_context.hpp>
#include <cuda_graph.hpp>
#include <cuda_inference_request_context.hpp>
#include <cuda_operation_base.hpp>
#include <cuda_operation_registry.hpp>
#include <cuda_profiler.hpp>
#include <cuda_test_constants.hpp>
#include <cuda_thread_context.hpp>
#include <functional>
#include <initializer_list>
#include <iostream>
#include <limits>
#include <memory>
#include <memory_manager/cuda_workbuffers.hpp>
#include <memory_manager/tensor_types.hpp>
#include <ngraph/shape.hpp>
#include <openvino/op/clamp.hpp>
#include <openvino/op/parameter.hpp>
#include <random>
#include <single_layer_tests/activation.hpp>
#include <utility>
#include <vector>

#include "benchmark.hpp"

namespace LayerTestsDefinitions {
namespace {

// =============================================================================
// clang-format off
// {AUTOGENERATED_TESTS_BEGIN_TAG_RELU}

// Attrs:  {}
// In:     (1, 1000, 14, 14)
// Out:    (1, 1000, 14, 14)
// Operators: 'squeezenet1.1:opid143' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid143,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1000, 14, 14}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);

// Attrs:  {}
// In:     (1, 1024, 14, 14)
// Out:    (1, 1024, 14, 14)
// Operators: 'resnet-50-caffe2:opid150' [FP16, FP32], 'resnet-50-caffe2:opid166' [FP16, FP32], 'resnet-50-caffe2:opid182' [FP16, FP32], 'resnet-50-caffe2:opid198' [FP16, FP32], 'resnet-50-caffe2:opid214' [FP16, FP32], 'resnet-50-caffe2:opid230' [FP16, FP32], 'resnet-50-pytorch:opid150' [FP32], 'resnet-50-pytorch:opid166' [FP32], 'resnet-50-pytorch:opid182' [FP32], 'resnet-50-pytorch:opid198' [FP32], 'resnet-50-pytorch:opid214' [FP32], 'resnet-50-pytorch:opid230' [FP32], 'resnet-50-tf:opid148' [FP16, FP32], 'resnet-50-tf:opid164' [FP16, FP32], 'resnet-50-tf:opid180' [FP16, FP32], 'resnet-50-tf:opid196' [FP16, FP32], 'resnet-50-tf:opid212' [FP16, FP32], 'resnet-50-tf:opid228' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid150,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>(
            {InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1024, 14, 14}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 100, 171)
// Out:    (1, 128, 100, 171)
// Operators: 'mask_rcnn_inception_v2_coco:opid102' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid102,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 100, 171}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 112, 112)
// Out:    (1, 128, 112, 112)
// Operators: 'vgg16-IR:opid18' [FP16, FP32], 'vgg16-IR:opid23' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_vgg16_IR_opid18,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 112, 112}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 16, 16)
// Out:    (1, 128, 16, 16)
// Operators: '2d_unet-graph-transform:opid38' [FP32], '2d_unet-graph-transform:opid43' [FP32], '2d_unet-graph-transform:opid65' [FP32], '2d_unet-graph-transform:opid70' [FP32], '2d_unet:opid100' [FP16, FP32], '2d_unet:opid105' [FP16, FP32], '2d_unet:opid38' [FP16, FP32], '2d_unet:opid43' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_2d_unet_graph_transform_opid38,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 16, 16}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 17, 17)
// Out:    (1, 128, 17, 17)
// Operators: 'googlenet-v4-tf:opid285' [FP16, FP32], 'googlenet-v4-tf:opid337' [FP16, FP32], 'googlenet-v4-tf:opid389' [FP16, FP32], 'googlenet-v4-tf:opid441' [FP16, FP32], 'googlenet-v4-tf:opid493' [FP16, FP32], 'googlenet-v4-tf:opid545' [FP16, FP32], 'googlenet-v4-tf:opid597' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid285,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 17, 17}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 18, 18, 18)
// Out:    (1, 128, 18, 18, 18)
// Operators: '3d_unet-graph-transform:opid38' [FP32], '3d_unet-graph-transform:opid43' [FP32], '3d_unet-graph-transform:opid65' [FP32], '3d_unet-graph-transform:opid70' [FP32], '3d_unet:opid108' [FP16, FP32], '3d_unet:opid113' [FP16, FP32], '3d_unet:opid38' [FP16, FP32], '3d_unet:opid43' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_3d_unet_graph_transform_opid38,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 18, 18, 18}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 28, 28)
// Out:    (1, 128, 28, 28)
// Operators: 'resnet-50-caffe2:opid103' [FP16, FP32], 'resnet-50-caffe2:opid108' [FP16, FP32], 'resnet-50-caffe2:opid119' [FP16, FP32], 'resnet-50-caffe2:opid124' [FP16, FP32], 'resnet-50-caffe2:opid72' [FP16, FP32], 'resnet-50-caffe2:opid87' [FP16, FP32], 'resnet-50-caffe2:opid92' [FP16, FP32], 'resnet-50-pytorch:opid103' [FP32], 'resnet-50-pytorch:opid108' [FP32], 'resnet-50-pytorch:opid119' [FP32], 'resnet-50-pytorch:opid124' [FP32], 'resnet-50-pytorch:opid72' [FP32], 'resnet-50-pytorch:opid87' [FP32], 'resnet-50-pytorch:opid92' [FP32], 'resnet-50-tf:opid101' [FP16, FP32], 'resnet-50-tf:opid106' [FP16, FP32], 'resnet-50-tf:opid117' [FP16, FP32], 'resnet-50-tf:opid122' [FP16, FP32], 'resnet-50-tf:opid70' [FP16, FP32], 'resnet-50-tf:opid85' [FP16, FP32], 'resnet-50-tf:opid90' [FP16, FP32], 'squeezenet1.1:opid51' [FP16, FP32], 'squeezenet1.1:opid56' [FP16, FP32], 'squeezenet1.1:opid67' [FP16, FP32], 'squeezenet1.1:opid72' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid103,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 28, 28}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 50, 86)
// Out:    (1, 128, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid149' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid154' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid160' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid176' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid186' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid191' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid197' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid208' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid218' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid245' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid149,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 50, 86}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 56, 56)
// Out:    (1, 128, 56, 56)
// Operators: 'photo_style_transfer:opid104' [FP16, FP32], 'photo_style_transfer:opid130' [FP16, FP32], 'photo_style_transfer:opid156' [FP16, FP32], 'photo_style_transfer:opid39' [FP16, FP32], 'photo_style_transfer:opid52' [FP16, FP32], 'photo_style_transfer:opid78' [FP16, FP32], 'resnet-50-caffe2:opid67' [FP16, FP32], 'resnet-50-pytorch:opid67' [FP32], 'resnet-50-tf:opid65' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_photo_style_transfer_opid104,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 56, 56}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 16, 128, 128)
// Out:    (1, 16, 128, 128)
// Operators: '2d_unet-graph-transform:opid10' [FP32], '2d_unet-graph-transform:opid113' [FP32], '2d_unet-graph-transform:opid118' [FP32], '2d_unet-graph-transform:opid5' [FP32], '2d_unet:opid10' [FP16, FP32], '2d_unet:opid253' [FP16, FP32], '2d_unet:opid258' [FP16, FP32], '2d_unet:opid5' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_2d_unet_graph_transform_opid10,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 16, 128, 128}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 16, 144, 144, 144)
// Out:    (1, 16, 144, 144, 144)
// Operators: '3d_unet-graph-transform:opid10' [FP32], '3d_unet-graph-transform:opid113' [FP32], '3d_unet-graph-transform:opid118' [FP32], '3d_unet-graph-transform:opid5' [FP32], '3d_unet:opid10' [FP16, FP32], '3d_unet:opid285' [FP16, FP32], '3d_unet:opid290' [FP16, FP32], '3d_unet:opid5' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_3d_unet_graph_transform_opid10,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 16, 144, 144, 144}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 16, 56, 56)
// Out:    (1, 16, 56, 56)
// Operators: 'squeezenet1.1:opid13' [FP16, FP32], 'squeezenet1.1:opid29' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid13,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 16, 56, 56}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 160, 50, 86)
// Out:    (1, 160, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid107' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid203' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid213' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid223' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid228' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid255' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid107,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 160, 50, 86}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 14, 14)
// Out:    (1, 192, 14, 14)
// Operators: 'squeezenet1.1:opid100' [FP16, FP32], 'squeezenet1.1:opid105' [FP16, FP32], 'squeezenet1.1:opid84' [FP16, FP32], 'squeezenet1.1:opid89' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid100,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 14, 14}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 17, 17)
// Out:    (1, 192, 17, 17)
// Operators: 'googlenet-v4-tf:opid244' [FP16, FP32], 'googlenet-v4-tf:opid259' [FP16, FP32], 'googlenet-v4-tf:opid264' [FP16, FP32], 'googlenet-v4-tf:opid296' [FP16, FP32], 'googlenet-v4-tf:opid311' [FP16, FP32], 'googlenet-v4-tf:opid316' [FP16, FP32], 'googlenet-v4-tf:opid348' [FP16, FP32], 'googlenet-v4-tf:opid363' [FP16, FP32], 'googlenet-v4-tf:opid368' [FP16, FP32], 'googlenet-v4-tf:opid400' [FP16, FP32], 'googlenet-v4-tf:opid415' [FP16, FP32], 'googlenet-v4-tf:opid420' [FP16, FP32], 'googlenet-v4-tf:opid452' [FP16, FP32], 'googlenet-v4-tf:opid467' [FP16, FP32], 'googlenet-v4-tf:opid472' [FP16, FP32], 'googlenet-v4-tf:opid504' [FP16, FP32], 'googlenet-v4-tf:opid519' [FP16, FP32], 'googlenet-v4-tf:opid524' [FP16, FP32], 'googlenet-v4-tf:opid556' [FP16, FP32], 'googlenet-v4-tf:opid571' [FP16, FP32], 'googlenet-v4-tf:opid576' [FP16, FP32], 'googlenet-v4-tf:opid603' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid244,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 17, 17}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 200, 342)
// Out:    (1, 192, 200, 342)
// Operators: 'mask_rcnn_inception_v2_coco:opid22' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid22,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 200, 342}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 35, 35)
// Out:    (1, 192, 35, 35)
// Operators: 'googlenet-v4-tf:opid222' [FP16, FP32], 'googlenet-v4-tf:opid62' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid222,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 35, 35}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 50, 86)
// Out:    (1, 192, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid166' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid250' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid260' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid265' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid166,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 50, 86}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 192, 8, 8)
// Out:    (1, 192, 8, 8)
// Operators: 'googlenet-v4-tf:opid608' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid608,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 192, 8, 8}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 2048, 7, 7)
// Out:    (1, 2048, 7, 7)
// Operators: 'resnet-50-caffe2:opid250' [FP16, FP32], 'resnet-50-caffe2:opid266' [FP16, FP32], 'resnet-50-caffe2:opid282' [FP16, FP32], 'resnet-50-pytorch:opid250' [FP32], 'resnet-50-pytorch:opid266' [FP32], 'resnet-50-pytorch:opid282' [FP32], 'resnet-50-tf:opid248' [FP16, FP32], 'resnet-50-tf:opid264' [FP16, FP32], 'resnet-50-tf:opid280' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid250,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 2048, 7, 7}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 224, 17, 17)
// Out:    (1, 224, 17, 17)
// Operators: 'googlenet-v4-tf:opid249' [FP16, FP32], 'googlenet-v4-tf:opid269' [FP16, FP32], 'googlenet-v4-tf:opid274' [FP16, FP32], 'googlenet-v4-tf:opid301' [FP16, FP32], 'googlenet-v4-tf:opid321' [FP16, FP32], 'googlenet-v4-tf:opid326' [FP16, FP32], 'googlenet-v4-tf:opid353' [FP16, FP32], 'googlenet-v4-tf:opid373' [FP16, FP32], 'googlenet-v4-tf:opid378' [FP16, FP32], 'googlenet-v4-tf:opid405' [FP16, FP32], 'googlenet-v4-tf:opid425' [FP16, FP32], 'googlenet-v4-tf:opid430' [FP16, FP32], 'googlenet-v4-tf:opid457' [FP16, FP32], 'googlenet-v4-tf:opid477' [FP16, FP32], 'googlenet-v4-tf:opid482' [FP16, FP32], 'googlenet-v4-tf:opid509' [FP16, FP32], 'googlenet-v4-tf:opid529' [FP16, FP32], 'googlenet-v4-tf:opid534' [FP16, FP32], 'googlenet-v4-tf:opid561' [FP16, FP32], 'googlenet-v4-tf:opid581' [FP16, FP32], 'googlenet-v4-tf:opid586' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid249,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 224, 17, 17}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 224, 35, 35)
// Out:    (1, 224, 35, 35)
// Operators: 'googlenet-v4-tf:opid227' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid227,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 224, 35, 35}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 224, 50, 86)
// Out:    (1, 224, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid129' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid129,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 224, 50, 86}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256)
// Out:    (1, 256)
// Operators: 'Tacotron2-decoder_iter:opid3' [FP32], 'Tacotron2-decoder_iter:opid36' [FP32], 'Tacotron2-graph-transform-cuda-decoder_iter:opid15' [FP32], 'Tacotron2-graph-transform-cuda-decoder_iter:opid25' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_Tacotron2_decoder_iter_opid3,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 14, 14)
// Out:    (1, 256, 14, 14)
// Operators: 'resnet-50-caffe2:opid140' [FP16, FP32], 'resnet-50-caffe2:opid155' [FP16, FP32], 'resnet-50-caffe2:opid160' [FP16, FP32], 'resnet-50-caffe2:opid171' [FP16, FP32], 'resnet-50-caffe2:opid176' [FP16, FP32], 'resnet-50-caffe2:opid187' [FP16, FP32], 'resnet-50-caffe2:opid192' [FP16, FP32], 'resnet-50-caffe2:opid203' [FP16, FP32], 'resnet-50-caffe2:opid208' [FP16, FP32], 'resnet-50-caffe2:opid219' [FP16, FP32], 'resnet-50-caffe2:opid224' [FP16, FP32], 'resnet-50-pytorch:opid140' [FP32], 'resnet-50-pytorch:opid155' [FP32], 'resnet-50-pytorch:opid160' [FP32], 'resnet-50-pytorch:opid171' [FP32], 'resnet-50-pytorch:opid176' [FP32], 'resnet-50-pytorch:opid187' [FP32], 'resnet-50-pytorch:opid192' [FP32], 'resnet-50-pytorch:opid203' [FP32], 'resnet-50-pytorch:opid208' [FP32], 'resnet-50-pytorch:opid219' [FP32], 'resnet-50-pytorch:opid224' [FP32], 'resnet-50-tf:opid138' [FP16, FP32], 'resnet-50-tf:opid153' [FP16, FP32], 'resnet-50-tf:opid158' [FP16, FP32], 'resnet-50-tf:opid169' [FP16, FP32], 'resnet-50-tf:opid174' [FP16, FP32], 'resnet-50-tf:opid185' [FP16, FP32], 'resnet-50-tf:opid190' [FP16, FP32], 'resnet-50-tf:opid201' [FP16, FP32], 'resnet-50-tf:opid206' [FP16, FP32], 'resnet-50-tf:opid217' [FP16, FP32], 'resnet-50-tf:opid222' [FP16, FP32], 'squeezenet1.1:opid116' [FP16, FP32], 'squeezenet1.1:opid121' [FP16, FP32], 'squeezenet1.1:opid132' [FP16, FP32], 'squeezenet1.1:opid137' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid140,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 14, 14}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 17, 17)
// Out:    (1, 256, 17, 17)
// Operators: 'googlenet-v4-tf:opid232' [FP16, FP32], 'googlenet-v4-tf:opid254' [FP16, FP32], 'googlenet-v4-tf:opid279' [FP16, FP32], 'googlenet-v4-tf:opid306' [FP16, FP32], 'googlenet-v4-tf:opid331' [FP16, FP32], 'googlenet-v4-tf:opid358' [FP16, FP32], 'googlenet-v4-tf:opid383' [FP16, FP32], 'googlenet-v4-tf:opid410' [FP16, FP32], 'googlenet-v4-tf:opid435' [FP16, FP32], 'googlenet-v4-tf:opid462' [FP16, FP32], 'googlenet-v4-tf:opid487' [FP16, FP32], 'googlenet-v4-tf:opid514' [FP16, FP32], 'googlenet-v4-tf:opid539' [FP16, FP32], 'googlenet-v4-tf:opid566' [FP16, FP32], 'googlenet-v4-tf:opid591' [FP16, FP32], 'googlenet-v4-tf:opid613' [FP16, FP32], 'googlenet-v4-tf:opid618' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid232,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 17, 17}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 28, 28)
// Out:    (1, 256, 28, 28)
// Operators: 'resnet-50-caffe2:opid135' [FP16, FP32], 'resnet-50-pytorch:opid135' [FP32], 'resnet-50-tf:opid133' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid135,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 28, 28}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 56, 56)
// Out:    (1, 256, 56, 56)
// Operators: 'resnet-50-caffe2:opid30' [FP16, FP32], 'resnet-50-caffe2:opid46' [FP16, FP32], 'resnet-50-caffe2:opid62' [FP16, FP32], 'resnet-50-pytorch:opid30' [FP32], 'resnet-50-pytorch:opid46' [FP32], 'resnet-50-pytorch:opid62' [FP32], 'resnet-50-tf:opid28' [FP16, FP32], 'resnet-50-tf:opid44' [FP16, FP32], 'resnet-50-tf:opid60' [FP16, FP32], 'vgg16-IR:opid29' [FP16, FP32], 'vgg16-IR:opid34' [FP16, FP32], 'vgg16-IR:opid39' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid30,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 56, 56}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 8, 8)
// Out:    (1, 256, 8, 8)
// Operators: '2d_unet-graph-transform:opid49' [FP32], '2d_unet-graph-transform:opid54' [FP32], '2d_unet:opid49' [FP16, FP32], '2d_unet:opid54' [FP16, FP32], 'googlenet-v4-tf:opid635' [FP16, FP32], 'googlenet-v4-tf:opid645' [FP16, FP32], 'googlenet-v4-tf:opid650' [FP16, FP32], 'googlenet-v4-tf:opid671' [FP16, FP32], 'googlenet-v4-tf:opid676' [FP16, FP32], 'googlenet-v4-tf:opid683' [FP16, FP32], 'googlenet-v4-tf:opid689' [FP16, FP32], 'googlenet-v4-tf:opid699' [FP16, FP32], 'googlenet-v4-tf:opid704' [FP16, FP32], 'googlenet-v4-tf:opid725' [FP16, FP32], 'googlenet-v4-tf:opid730' [FP16, FP32], 'googlenet-v4-tf:opid737' [FP16, FP32], 'googlenet-v4-tf:opid743' [FP16, FP32], 'googlenet-v4-tf:opid753' [FP16, FP32], 'googlenet-v4-tf:opid758' [FP16, FP32], 'googlenet-v4-tf:opid779' [FP16, FP32], 'googlenet-v4-tf:opid784' [FP16, FP32], 'googlenet-v4-tf:opid791' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_2d_unet_graph_transform_opid49,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 8, 8}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 9, 9, 9)
// Out:    (1, 256, 9, 9, 9)
// Operators: '3d_unet-graph-transform:opid49' [FP32], '3d_unet-graph-transform:opid54' [FP32], '3d_unet:opid49' [FP16, FP32], '3d_unet:opid54' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_3d_unet_graph_transform_opid49,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 9, 9, 9}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 100, 171)
// Out:    (1, 32, 100, 171)
// Operators: 'mask_rcnn_inception_v2_coco:opid59' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid59,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 100, 171}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 147, 147)
// Out:    (1, 32, 147, 147)
// Operators: 'googlenet-v4-tf:opid14' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid14,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 147, 147}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 149, 149)
// Out:    (1, 32, 149, 149)
// Operators: 'googlenet-v4-tf:opid9' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid9,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 149, 149}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 224, 224)
// Out:    (1, 32, 224, 224)
// Operators: 'photo_style_transfer:opid13' [FP16, FP32], 'photo_style_transfer:opid215' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_photo_style_transfer_opid13,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 224, 224}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 28, 28)
// Out:    (1, 32, 28, 28)
// Operators: 'squeezenet1.1:opid46' [FP16, FP32], 'squeezenet1.1:opid62' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid46,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 28, 28}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 64, 64)
// Out:    (1, 32, 64, 64)
// Operators: '2d_unet-graph-transform:opid102' [FP32], '2d_unet-graph-transform:opid16' [FP32], '2d_unet-graph-transform:opid21' [FP32], '2d_unet-graph-transform:opid97' [FP32], '2d_unet:opid16' [FP16, FP32], '2d_unet:opid202' [FP16, FP32], '2d_unet:opid207' [FP16, FP32], '2d_unet:opid21' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_2d_unet_graph_transform_opid102,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 64, 64}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 72, 72, 72)
// Out:    (1, 32, 72, 72, 72)
// Operators: '3d_unet-graph-transform:opid102' [FP32], '3d_unet-graph-transform:opid16' [FP32], '3d_unet-graph-transform:opid21' [FP32], '3d_unet-graph-transform:opid97' [FP32], '3d_unet:opid16' [FP16, FP32], '3d_unet:opid21' [FP16, FP32], '3d_unet:opid226' [FP16, FP32], '3d_unet:opid231' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_3d_unet_graph_transform_opid102,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 72, 72, 72}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 320, 17, 17)
// Out:    (1, 320, 17, 17)
// Operators: 'googlenet-v4-tf:opid623' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid623,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 320, 17, 17}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 320, 8, 8)
// Out:    (1, 320, 8, 8)
// Operators: 'googlenet-v4-tf:opid628' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid628,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 320, 8, 8}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 384, 17, 17)
// Out:    (1, 384, 17, 17)
// Operators: 'googlenet-v4-tf:opid217' [FP16, FP32], 'googlenet-v4-tf:opid239' [FP16, FP32], 'googlenet-v4-tf:opid291' [FP16, FP32], 'googlenet-v4-tf:opid343' [FP16, FP32], 'googlenet-v4-tf:opid395' [FP16, FP32], 'googlenet-v4-tf:opid447' [FP16, FP32], 'googlenet-v4-tf:opid499' [FP16, FP32], 'googlenet-v4-tf:opid551' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid217,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 384, 17, 17}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 384, 8, 8)
// Out:    (1, 384, 8, 8)
// Operators: 'googlenet-v4-tf:opid640' [FP16, FP32], 'googlenet-v4-tf:opid656' [FP16, FP32], 'googlenet-v4-tf:opid694' [FP16, FP32], 'googlenet-v4-tf:opid710' [FP16, FP32], 'googlenet-v4-tf:opid748' [FP16, FP32], 'googlenet-v4-tf:opid764' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid640,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 384, 8, 8}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 4096)
// Out:    (1, 4096)
// Operators: 'vgg16-IR:opid84' [FP16, FP32], 'vgg16-IR:opid96' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_vgg16_IR_opid84,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 4096}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 448, 8, 8)
// Out:    (1, 448, 8, 8)
// Operators: 'googlenet-v4-tf:opid661' [FP16, FP32], 'googlenet-v4-tf:opid715' [FP16, FP32], 'googlenet-v4-tf:opid769' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid661,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 448, 8, 8}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 48, 14, 14)
// Out:    (1, 48, 14, 14)
// Operators: 'squeezenet1.1:opid79' [FP16, FP32], 'squeezenet1.1:opid95' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid79,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 48, 14, 14}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 1000)
// Out:    (1, 512, 1000)
// Operators: 'Tacotron2-encoder:opid10' [FP32], 'Tacotron2-encoder:opid15' [FP32], 'Tacotron2-encoder:opid20' [FP32], 'Tacotron2-graph-transform-cuda-encoder:opid11' [FP32], 'Tacotron2-graph-transform-cuda-encoder:opid16' [FP32], 'Tacotron2-graph-transform-cuda-encoder:opid21' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_Tacotron2_encoder_opid10,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 1000}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 14, 14)
// Out:    (1, 512, 14, 14)
// Operators: 'resnet-50-caffe2:opid235' [FP16, FP32], 'resnet-50-pytorch:opid235' [FP32], 'resnet-50-tf:opid233' [FP16, FP32], 'vgg16-IR:opid61' [FP16, FP32], 'vgg16-IR:opid66' [FP16, FP32], 'vgg16-IR:opid71' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid235,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 14, 14}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 28, 28)
// Out:    (1, 512, 28, 28)
// Operators: 'resnet-50-caffe2:opid114' [FP16, FP32], 'resnet-50-caffe2:opid130' [FP16, FP32], 'resnet-50-caffe2:opid82' [FP16, FP32], 'resnet-50-caffe2:opid98' [FP16, FP32], 'resnet-50-pytorch:opid114' [FP32], 'resnet-50-pytorch:opid130' [FP32], 'resnet-50-pytorch:opid82' [FP32], 'resnet-50-pytorch:opid98' [FP32], 'resnet-50-tf:opid112' [FP16, FP32], 'resnet-50-tf:opid128' [FP16, FP32], 'resnet-50-tf:opid80' [FP16, FP32], 'resnet-50-tf:opid96' [FP16, FP32], 'vgg16-IR:opid45' [FP16, FP32], 'vgg16-IR:opid50' [FP16, FP32], 'vgg16-IR:opid55' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid114,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 28, 28}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 7, 7)
// Out:    (1, 512, 7, 7)
// Operators: 'resnet-50-caffe2:opid240' [FP16, FP32], 'resnet-50-caffe2:opid255' [FP16, FP32], 'resnet-50-caffe2:opid260' [FP16, FP32], 'resnet-50-caffe2:opid271' [FP16, FP32], 'resnet-50-caffe2:opid276' [FP16, FP32], 'resnet-50-pytorch:opid240' [FP32], 'resnet-50-pytorch:opid255' [FP32], 'resnet-50-pytorch:opid260' [FP32], 'resnet-50-pytorch:opid271' [FP32], 'resnet-50-pytorch:opid276' [FP32], 'resnet-50-tf:opid238' [FP16, FP32], 'resnet-50-tf:opid253' [FP16, FP32], 'resnet-50-tf:opid258' [FP16, FP32], 'resnet-50-tf:opid269' [FP16, FP32], 'resnet-50-tf:opid274' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid240,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 7, 7}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 8, 8)
// Out:    (1, 512, 8, 8)
// Operators: 'googlenet-v4-tf:opid666' [FP16, FP32], 'googlenet-v4-tf:opid720' [FP16, FP32], 'googlenet-v4-tf:opid774' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid666,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 8, 8}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 100, 171)
// Out:    (1, 64, 100, 171)
// Operators: 'mask_rcnn_inception_v2_coco:opid112' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid28' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid33' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid38' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid43' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid65' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid70' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid80' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid96' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid112,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 100, 171}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 112, 112)
// Out:    (1, 64, 112, 112)
// Operators: 'photo_style_transfer:opid192' [FP16, FP32], 'photo_style_transfer:opid26' [FP16, FP32], 'resnet-50-caffe2:opid9' [FP16, FP32], 'resnet-50-pytorch:opid9' [FP32], 'resnet-50-tf:opid7' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_photo_style_transfer_opid192,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 112, 112}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 113, 113)
// Out:    (1, 64, 113, 113)
// Operators: 'squeezenet1.1:opid7' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid7,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 113, 113}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 14, 14)
// Out:    (1, 64, 14, 14)
// Operators: 'squeezenet1.1:opid111' [FP16, FP32], 'squeezenet1.1:opid127' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_squeezenet1_1_opid111,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 14, 14}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 147, 147)
// Out:    (1, 64, 147, 147)
// Operators: 'googlenet-v4-tf:opid19' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid19,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 147, 147}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 200, 342)
// Out:    (1, 64, 200, 342)
// Operators: 'mask_rcnn_inception_v2_coco:opid17' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid17,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 200, 342}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 224, 224)
// Out:    (1, 64, 224, 224)
// Operators: 'vgg16-IR:opid12' [FP16, FP32], 'vgg16-IR:opid7' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_vgg16_IR_opid12,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 224, 224}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 32, 32)
// Out:    (1, 64, 32, 32)
// Operators: '2d_unet-graph-transform:opid27' [FP32], '2d_unet-graph-transform:opid32' [FP32], '2d_unet-graph-transform:opid81' [FP32], '2d_unet-graph-transform:opid86' [FP32], '2d_unet:opid151' [FP16, FP32], '2d_unet:opid156' [FP16, FP32], '2d_unet:opid27' [FP16, FP32], '2d_unet:opid32' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_2d_unet_graph_transform_opid27,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 32, 32}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 35, 35)
// Out:    (1, 64, 35, 35)
// Operators: 'googlenet-v4-tf:opid111' [FP16, FP32], 'googlenet-v4-tf:opid121' [FP16, FP32], 'googlenet-v4-tf:opid148' [FP16, FP32], 'googlenet-v4-tf:opid158' [FP16, FP32], 'googlenet-v4-tf:opid185' [FP16, FP32], 'googlenet-v4-tf:opid195' [FP16, FP32], 'googlenet-v4-tf:opid74' [FP16, FP32], 'googlenet-v4-tf:opid84' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid111,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 35, 35}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 36, 36, 36)
// Out:    (1, 64, 36, 36, 36)
// Operators: '3d_unet-graph-transform:opid27' [FP32], '3d_unet-graph-transform:opid32' [FP32], '3d_unet-graph-transform:opid81' [FP32], '3d_unet-graph-transform:opid86' [FP32], '3d_unet:opid167' [FP16, FP32], '3d_unet:opid172' [FP16, FP32], '3d_unet:opid27' [FP16, FP32], '3d_unet:opid32' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_3d_unet_graph_transform_opid27,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 36, 36, 36}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 400, 683)
// Out:    (1, 64, 400, 683)
// Operators: 'mask_rcnn_inception_v2_coco:opid11' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid11,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 400, 683}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 50, 86)
// Out:    (1, 64, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid134' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid134,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 50, 86}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 56, 56)
// Out:    (1, 64, 56, 56)
// Operators: 'resnet-50-caffe2:opid15' [FP16, FP32], 'resnet-50-caffe2:opid20' [FP16, FP32], 'resnet-50-caffe2:opid35' [FP16, FP32], 'resnet-50-caffe2:opid40' [FP16, FP32], 'resnet-50-caffe2:opid51' [FP16, FP32], 'resnet-50-caffe2:opid56' [FP16, FP32], 'resnet-50-pytorch:opid15' [FP32], 'resnet-50-pytorch:opid20' [FP32], 'resnet-50-pytorch:opid35' [FP32], 'resnet-50-pytorch:opid40' [FP32], 'resnet-50-pytorch:opid51' [FP32], 'resnet-50-pytorch:opid56' [FP32], 'resnet-50-tf:opid13' [FP16, FP32], 'resnet-50-tf:opid18' [FP16, FP32], 'resnet-50-tf:opid33' [FP16, FP32], 'resnet-50-tf:opid38' [FP16, FP32], 'resnet-50-tf:opid49' [FP16, FP32], 'resnet-50-tf:opid54' [FP16, FP32], 'squeezenet1.1:opid18' [FP16, FP32], 'squeezenet1.1:opid23' [FP16, FP32], 'squeezenet1.1:opid34' [FP16, FP32], 'squeezenet1.1:opid39' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_resnet_50_caffe2_opid15,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 56, 56}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 73, 73)
// Out:    (1, 64, 73, 73)
// Operators: 'googlenet-v4-tf:opid31' [FP16, FP32], 'googlenet-v4-tf:opid41' [FP16, FP32], 'googlenet-v4-tf:opid46' [FP16, FP32], 'googlenet-v4-tf:opid51' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid31,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 73, 73}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 100, 171)
// Out:    (1, 96, 100, 171)
// Operators: 'mask_rcnn_inception_v2_coco:opid117' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid48' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid53' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid75' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid85' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid90' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid117,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 100, 171}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 35, 35)
// Out:    (1, 96, 35, 35)
// Operators: 'googlenet-v4-tf:opid100' [FP16, FP32], 'googlenet-v4-tf:opid106' [FP16, FP32], 'googlenet-v4-tf:opid116' [FP16, FP32], 'googlenet-v4-tf:opid126' [FP16, FP32], 'googlenet-v4-tf:opid131' [FP16, FP32], 'googlenet-v4-tf:opid137' [FP16, FP32], 'googlenet-v4-tf:opid143' [FP16, FP32], 'googlenet-v4-tf:opid153' [FP16, FP32], 'googlenet-v4-tf:opid163' [FP16, FP32], 'googlenet-v4-tf:opid168' [FP16, FP32], 'googlenet-v4-tf:opid174' [FP16, FP32], 'googlenet-v4-tf:opid180' [FP16, FP32], 'googlenet-v4-tf:opid190' [FP16, FP32], 'googlenet-v4-tf:opid200' [FP16, FP32], 'googlenet-v4-tf:opid205' [FP16, FP32], 'googlenet-v4-tf:opid211' [FP16, FP32], 'googlenet-v4-tf:opid69' [FP16, FP32], 'googlenet-v4-tf:opid79' [FP16, FP32], 'googlenet-v4-tf:opid89' [FP16, FP32], 'googlenet-v4-tf:opid94' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid100,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 35, 35}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 50, 86)
// Out:    (1, 96, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid122' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid139' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid144' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid171' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid181' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid234' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid240' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid271' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid122,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 50, 86}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 71, 71)
// Out:    (1, 96, 71, 71)
// Operators: 'googlenet-v4-tf:opid36' [FP16, FP32], 'googlenet-v4-tf:opid56' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid36,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 71, 71}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 73, 73)
// Out:    (1, 96, 73, 73)
// Operators: 'googlenet-v4-tf:opid25' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_googlenet_v4_tf_opid25,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 73, 73}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 128, 4, 4)
// Out:    (100, 128, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid373' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid410' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid531' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid568' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid373,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 128, 4, 4}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 128, 7, 7)
// Out:    (100, 128, 7, 7)
// Operators: 'mask_rcnn_inception_v2_coco:opid315' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid473' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid315,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 128, 7, 7}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 160, 4, 4)
// Out:    (100, 160, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid357' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid515' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid357,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 160, 4, 4}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 192, 4, 4)
// Out:    (100, 192, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid320' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid347' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid384' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid394' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid478' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid505' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid542' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid552' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid320,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 192, 4, 4}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 192, 7, 7)
// Out:    (100, 192, 7, 7)
// Operators: 'mask_rcnn_inception_v2_coco:opid325' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid483' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid325,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 192, 7, 7}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 224, 4, 4)
// Out:    (100, 224, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid362' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid367' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid399' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid404' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid520' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid525' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid557' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid562' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid362,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 224, 4, 4}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 256, 15, 15)
// Out:    (100, 256, 15, 15)
// Operators: 'mask_rcnn_inception_v2_coco:opid576' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid576,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 256, 15, 15}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 256, 4, 4)
// Out:    (100, 256, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid335' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid493' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid335,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 256, 4, 4}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 256, 7, 7)
// Out:    (100, 256, 7, 7)
// Operators: 'mask_rcnn_inception_v2_coco:opid330' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid488' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid330,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 256, 7, 7}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 320, 4, 4)
// Out:    (100, 320, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid352' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid389' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid510' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid547' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid352,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 320, 4, 4}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 352, 4, 4)
// Out:    (100, 352, 4, 4)
// Operators: 'mask_rcnn_inception_v2_coco:opid342' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid379' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid500' [FP16, FP32], 'mask_rcnn_inception_v2_coco:opid537' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_mask_rcnn_inception_v2_coco_opid342,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 352, 4, 4}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (64, 1024)
// Out:    (64, 1024)
// Operators: 'GAN:opid33' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_GAN_opid33,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{64, 1024}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (64, 6272)
// Out:    (64, 6272)
// Operators: 'GAN:opid66' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_GAN_opid66,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{64, 6272}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (64, 64, 14, 14)
// Out:    (64, 64, 14, 14)
// Operators: 'GAN:opid96' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_ReLU_GAN_opid96,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Relu, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{64, 64, 14, 14}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);

// {AUTOGENERATED_TESTS_END_TAG_RELU}
// clang-format on
// =============================================================================

// =============================================================================
// clang-format off
// {AUTOGENERATED_TESTS_BEGIN_TAG_SIGMOID}

// Attrs:  {}
// In:     (1, 1, 128, 128)
// Out:    (1, 1, 128, 128)
// Operators: '2d_unet-graph-transform-cuda:opid82' [FP32], '2d_unet-graph-transform:opid123' [FP32], '2d_unet:opid263' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_2d_unet_graph_transform_cuda_opid82,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1, 128, 128}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1, 144, 144, 144)
// Out:    (1, 1, 144, 144, 144)
// Operators: '3d_unet-graph-transform-cuda:opid82' [FP32], '3d_unet-graph-transform:opid123' [FP32], '3d_unet:opid295' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_3d_unet_graph_transform_cuda_opid82,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1, 144, 144, 144}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1, 1917, 91)
// Out:    (1, 1, 1917, 91)
// Operators: 'ssd_mobilenet_v2_coco:opid420' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_ssd_mobilenet_v2_coco_opid420,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1, 1917, 91}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1152, 1, 1)
// Out:    (1, 1152, 1, 1)
// Operators: 'efficientdet-d1-tf:opid499' [FP16, FP32], 'efficientdet-d1-tf:opid527' [FP16, FP32], 'efficientdet-d1-tf:opid555' [FP16, FP32], 'efficientdet-d1-tf:opid583' [FP16, FP32], 'efficientdet-d1-tf:opid611' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid499,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1152, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 144, 1, 1)
// Out:    (1, 144, 1, 1)
// Operators: 'efficientdet-d1-tf:opid103' [FP16, FP32], 'efficientdet-d1-tf:opid131' [FP16, FP32], 'efficientdet-d1-tf:opid159' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid103,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 144, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 16, 1, 1)
// Out:    (1, 16, 1, 1)
// Operators: 'efficientdet-d1-tf:opid48' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid48,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 16, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1920, 1, 1)
// Out:    (1, 1920, 1, 1)
// Operators: 'efficientdet-d1-tf:opid638' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid638,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1920, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 240, 1, 1)
// Out:    (1, 240, 1, 1)
// Operators: 'efficientdet-d1-tf:opid186' [FP16, FP32], 'efficientdet-d1-tf:opid214' [FP16, FP32], 'efficientdet-d1-tf:opid246' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid186,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 240, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 3, 20, 20, 85)
// Out:    (1, 3, 20, 20, 85)
// Operators: 'yolov5-640x640-IR:opid516' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_yolov5_640x640_IR_opid516,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 3, 20, 20, 85}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 3, 40, 40, 85)
// Out:    (1, 3, 40, 40, 85)
// Operators: 'yolov5-640x640-IR:opid431' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_yolov5_640x640_IR_opid431,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 3, 40, 40, 85}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 3, 80, 80, 85)
// Out:    (1, 3, 80, 80, 85)
// Operators: 'yolov5-640x640-IR:opid346' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_yolov5_640x640_IR_opid346,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 3, 80, 80, 85}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 1, 1)
// Out:    (1, 32, 1, 1)
// Operators: 'efficientdet-d1-tf:opid26' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid26,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 480, 1, 1)
// Out:    (1, 480, 1, 1)
// Operators: 'efficientdet-d1-tf:opid273' [FP16, FP32], 'efficientdet-d1-tf:opid301' [FP16, FP32], 'efficientdet-d1-tf:opid329' [FP16, FP32], 'efficientdet-d1-tf:opid357' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid273,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 480, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 672, 1, 1)
// Out:    (1, 672, 1, 1)
// Operators: 'efficientdet-d1-tf:opid384' [FP16, FP32], 'efficientdet-d1-tf:opid412' [FP16, FP32], 'efficientdet-d1-tf:opid440' [FP16, FP32], 'efficientdet-d1-tf:opid472' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid384,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 672, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 76725, 90)
// Out:    (1, 76725, 90)
// Operators: 'efficientdet-d1-tf:opid1435' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid1435,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 76725, 90}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 1, 1)
// Out:    (1, 96, 1, 1)
// Operators: 'efficientdet-d1-tf:opid76' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_efficientdet_d1_tf_opid76,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (100, 90, 15, 15)
// Out:    (100, 90, 15, 15)
// Operators: 'mask_rcnn_inception_v2_coco:opid581' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_mask_rcnn_inception_v2_coco_opid581,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{100, 90, 15, 15}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (64, 1, 28, 28)
// Out:    (64, 1, 28, 28)
// Operators: 'GAN:opid102' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Sigmoid_GAN_opid102,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Sigmoid, 0}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{64, 1, 28, 28}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);

// {AUTOGENERATED_TESTS_END_TAG_SIGMOID}
// clang-format on
// =============================================================================

// ------------- Tanh -------------

std::initializer_list<std::initializer_list<std::size_t>> tanhShapes{
    {1, 100, 128},
    {1, 512, 1000},
    {1, 800},
    {64, 128, 64},
    {64, 64, 128},
    {64, 64, 256, 2},
};

auto listToVectors(const std::initializer_list<std::initializer_list<std::size_t>>& list) {
    // pair of {input shape, unused}
    std::vector<std::pair<std::vector<size_t>, std::vector<size_t>>> shapes;
    shapes.reserve(list.size());
    for (auto& e : list) shapes.emplace_back(e, 0);
    return shapes;
}

const auto basicTanhCases =
    ::testing::Combine(::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Tanh, 0}),
                       ::testing::Values(InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16),
                       ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
                       ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
                       ::testing::Values(InferenceEngine::Layout::ANY),
                       ::testing::Values(InferenceEngine::Layout::ANY),
                       ::testing::ValuesIn(listToVectors(tanhShapes)),
                       ::testing::Values(CommonTestUtils::DEVICE_NVIDIA));

INSTANTIATE_TEST_CASE_P(smoke_Activation_Basic_Tanh,
                        ActivationLayerTest,
                        basicTanhCases,
                        ActivationLayerTest::getTestCaseName);

// =============================================================================
// ------------- Clamp -------------

using ClampParams = std::pair<ngraph::helpers::ActivationTypes, std::vector<float>>;
using ClampShape = std::pair<std::vector<size_t>, std::vector<size_t>>;
using Precisions = std::initializer_list<InferenceEngine::Precision>;

// ------------- Clamp Smoke -------------

const std::initializer_list<ClampParams> clampParamsSmoke{{ngraph::helpers::Clamp, {0.0, 10.1}},
                                                          {ngraph::helpers::Clamp, {0.0, 10.5}},
                                                          {ngraph::helpers::Clamp, {0.0, 20.4}},
                                                          {ngraph::helpers::Clamp, {0.0, 23.999}},
                                                          {ngraph::helpers::Clamp, {0.0, 100.0}},
                                                          {ngraph::helpers::Clamp, {-1.0, 0.0}},
                                                          {ngraph::helpers::Clamp, {-20.1, -10.5}},
                                                          {ngraph::helpers::Clamp, {-10.0, 10.0}},
                                                          {ngraph::helpers::Clamp, {10.3, 20.4}},
                                                          {ngraph::helpers::Clamp, {0.1, 10.1}},
                                                          {ngraph::helpers::Clamp, {10.0, 100.0}},
                                                          {ngraph::helpers::Clamp, {10.6, 20.6}}};

const Precisions clampNetPrcSmoke{InferenceEngine::Precision::FP32,
                                  InferenceEngine::Precision::FP16,
                                  InferenceEngine::Precision::I32,
                                  InferenceEngine::Precision::I16};

const std::initializer_list<ClampShape> clampInShapesSmoke{{{50}, {}}, {{10, 10}, {}}, {{1, 20, 20}, {}}};

const auto clampCasesSmoke = ::testing::Combine(::testing::ValuesIn(clampParamsSmoke),
                                                ::testing::ValuesIn(clampNetPrcSmoke),
                                                ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
                                                ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
                                                ::testing::Values(InferenceEngine::Layout::ANY),
                                                ::testing::Values(InferenceEngine::Layout::ANY),
                                                ::testing::ValuesIn(clampInShapesSmoke),
                                                ::testing::Values(CommonTestUtils::DEVICE_NVIDIA));

INSTANTIATE_TEST_CASE_P(smoke_Activation_Basic_Clamp,
                        ActivationLayerTest,
                        clampCasesSmoke,
                        ActivationLayerTest::getTestCaseName);

const auto clampCasesSmokeU32 = ::testing::Combine(::testing::ValuesIn(clampParamsSmoke),
                                                   ::testing::Values(InferenceEngine::Precision::U32),
                                                   ::testing::Values(InferenceEngine::Precision::U32),
                                                   ::testing::Values(InferenceEngine::Precision::U32),
                                                   ::testing::Values(InferenceEngine::Layout::ANY),
                                                   ::testing::Values(InferenceEngine::Layout::ANY),
                                                   ::testing::ValuesIn(clampInShapesSmoke),
                                                   ::testing::Values(CommonTestUtils::DEVICE_NVIDIA));

INSTANTIATE_TEST_CASE_P(smoke_Activation_Basic_Clamp_U32,
                        ActivationLayerTest,
                        clampCasesSmokeU32,
                        ActivationLayerTest::getTestCaseName);

const auto clampCasesSmokeI64 = ::testing::Combine(::testing::ValuesIn(clampParamsSmoke),
                                                   ::testing::Values(InferenceEngine::Precision::I64),
                                                   ::testing::Values(InferenceEngine::Precision::I64),
                                                   ::testing::Values(InferenceEngine::Precision::I64),
                                                   ::testing::Values(InferenceEngine::Layout::ANY),
                                                   ::testing::Values(InferenceEngine::Layout::ANY),
                                                   ::testing::ValuesIn(clampInShapesSmoke),
                                                   ::testing::Values(CommonTestUtils::DEVICE_NVIDIA));

INSTANTIATE_TEST_CASE_P(smoke_Activation_Basic_Clamp_I64,
                        ActivationLayerTest,
                        clampCasesSmokeI64,
                        ActivationLayerTest::getTestCaseName);

// clang-format off
// {AUTOGENERATED_TESTS_BEGIN_TAG_CLAMP}
using AutogenClampParams = std::pair<
    std::pair<ngraph::helpers::ActivationTypes, std::vector<float>>,
    std::pair<std::vector<size_t>, std::vector<size_t>>>;
// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 128, 1, 1)
// Out:    (1, 128, 1, 1)
// Operators: 'ssd_mobilenet_v2_coco:opid357' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid357_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 128, 1, 1}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid357,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid357_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid357_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 128, 2, 2)
// Out:    (1, 128, 2, 2)
// Operators: 'ssd_mobilenet_v2_coco:opid329' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid329_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 128, 2, 2}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid329,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid329_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid329_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 128, 3, 3)
// Out:    (1, 128, 3, 3)
// Operators: 'ssd_mobilenet_v2_coco:opid306' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid324' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid306_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 128, 3, 3}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid306,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid306_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid306_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 128, 5, 5)
// Out:    (1, 128, 5, 5)
// Operators: 'ssd_mobilenet_v2_coco:opid301' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid301_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 128, 5, 5}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid301,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid301_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid301_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 1280, 10, 10)
// Out:    (1, 1280, 10, 10)
// Operators: 'ssd_mobilenet_v2_coco:opid265' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid265_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 1280, 10, 10}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid265,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid265_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid265_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 144, 38, 38)
// Out:    (1, 144, 38, 38)
// Operators: 'ssd_mobilenet_v2_coco:opid57' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid57_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 144, 38, 38}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid57,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid57_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid57_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 144, 75, 75)
// Out:    (1, 144, 75, 75)
// Operators: 'ssd_mobilenet_v2_coco:opid37' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid42' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid52' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid37_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 144, 75, 75}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid37,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid37_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid37_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 192, 19, 19)
// Out:    (1, 192, 19, 19)
// Operators: 'ssd_mobilenet_v2_coco:opid101' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid101_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 192, 19, 19}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid101,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid101_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid101_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 192, 38, 38)
// Out:    (1, 192, 38, 38)
// Operators: 'ssd_mobilenet_v2_coco:opid66' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid71' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid81' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid86' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid96' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid66_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 192, 38, 38}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid66,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid66_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid66_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 256, 10, 10)
// Out:    (1, 256, 10, 10)
// Operators: 'ssd_mobilenet_v2_coco:opid278' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid278_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 256, 10, 10}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid278,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid278_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid278_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 256, 2, 2)
// Out:    (1, 256, 2, 2)
// Operators: 'ssd_mobilenet_v2_coco:opid334' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid334_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 256, 2, 2}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid334,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid334_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid334_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 256, 3, 3)
// Out:    (1, 256, 3, 3)
// Operators: 'ssd_mobilenet_v2_coco:opid311' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid311_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 256, 3, 3}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid311,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid311_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid311_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 256, 5, 5)
// Out:    (1, 256, 5, 5)
// Operators: 'ssd_mobilenet_v2_coco:opid283' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid283_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 256, 5, 5}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid283,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid283_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid283_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 32, 150, 150)
// Out:    (1, 32, 150, 150)
// Operators: 'ssd_mobilenet_v2_coco:opid14' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid9' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid14_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 32, 150, 150}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid14,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid14_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid14_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 384, 19, 19)
// Out:    (1, 384, 19, 19)
// Operators: 'ssd_mobilenet_v2_coco:opid110' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid115' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid125' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid130' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid140' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid145' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid155' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid160' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid110_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 384, 19, 19}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid110,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid110_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid110_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 512, 5, 5)
// Out:    (1, 512, 5, 5)
// Operators: 'ssd_mobilenet_v2_coco:opid288' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid288_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 512, 5, 5}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid288,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid288_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid288_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 512, 50, 86)
// Out:    (1, 512, 50, 86)
// Operators: 'mask_rcnn_inception_v2_coco:opid277' [FP16, FP32]
const AutogenClampParams autogen_Clamp_mask_rcnn_inception_v2_coco_opid277_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 512, 50, 86}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_mask_rcnn_inception_v2_coco_opid277,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_mask_rcnn_inception_v2_coco_opid277_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_mask_rcnn_inception_v2_coco_opid277_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 576, 10, 10)
// Out:    (1, 576, 10, 10)
// Operators: 'ssd_mobilenet_v2_coco:opid212' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid212_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 576, 10, 10}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid212,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid212_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid212_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 576, 19, 19)
// Out:    (1, 576, 19, 19)
// Operators: 'ssd_mobilenet_v2_coco:opid169' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid174' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid184' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid189' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid199' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid169_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 576, 19, 19}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid169,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid169_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid169_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 64, 1, 1)
// Out:    (1, 64, 1, 1)
// Operators: 'ssd_mobilenet_v2_coco:opid352' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid352_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 64, 1, 1}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid352,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid352_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid352_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 64, 2, 2)
// Out:    (1, 64, 2, 2)
// Operators: 'ssd_mobilenet_v2_coco:opid347' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid347_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 64, 2, 2}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid347,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid347_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid347_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 96, 150, 150)
// Out:    (1, 96, 150, 150)
// Operators: 'ssd_mobilenet_v2_coco:opid23' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid23_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 96, 150, 150}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid23,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid23_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid23_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 96, 75, 75)
// Out:    (1, 96, 75, 75)
// Operators: 'ssd_mobilenet_v2_coco:opid28' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid28_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 96, 75, 75}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid28,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid28_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid28_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {'max': '6.0', 'min': '0.0'}
// In:     (1, 960, 10, 10)
// Out:    (1, 960, 10, 10)
// Operators: 'ssd_mobilenet_v2_coco:opid221' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid226' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid236' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid241' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid251' [FP16, FP32], 'ssd_mobilenet_v2_coco:opid256' [FP16, FP32]
const AutogenClampParams autogen_Clamp_ssd_mobilenet_v2_coco_opid221_params = 
	{{ngraph::helpers::Clamp, {0.0, 6.0}}, {{1, 960, 10, 10}, {}}};
INSTANTIATE_TEST_CASE_P(
    autogen_Clamp_ssd_mobilenet_v2_coco_opid221,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid221_params.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(autogen_Clamp_ssd_mobilenet_v2_coco_opid221_params.second),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);

const std::vector<std::reference_wrapper<const AutogenClampParams>> autogen_Clamp_all_params{
    autogen_Clamp_ssd_mobilenet_v2_coco_opid357_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid329_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid306_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid301_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid265_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid57_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid37_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid101_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid66_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid278_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid334_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid311_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid283_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid14_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid110_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid288_params,
    autogen_Clamp_mask_rcnn_inception_v2_coco_opid277_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid212_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid169_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid352_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid347_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid23_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid28_params,
    autogen_Clamp_ssd_mobilenet_v2_coco_opid221_params,
};

// {AUTOGENERATED_TESTS_END_TAG_CLAMP}
// clang-format on

namespace benchmark {

// ------------- Clamp Big shapes-------------

const ClampParams clampParamsBig{ngraph::helpers::Clamp, {0.0, 10.0}};

const Precisions clampNetPrcBig{InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16};

const ClampShape clampInShapeBig{{1024, 1024, 384, 2}, {}};

const auto clampCasesBig = ::testing::Combine(::testing::Values(clampParamsBig),
                                              ::testing::ValuesIn(clampNetPrcBig),
                                              ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
                                              ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
                                              ::testing::Values(InferenceEngine::Layout::ANY),
                                              ::testing::Values(InferenceEngine::Layout::ANY),
                                              ::testing::Values(clampInShapeBig),
                                              ::testing::Values(CommonTestUtils::DEVICE_NVIDIA));

struct ClampBenchmark : testing::Test {
    template <typename T>
    static void testOneShape(const ClampParams& params, const ClampShape& shape) {
        using CDevPtr = CUDA::DevicePointer<const void*>;
        using DevPtr = CUDA::DevicePointer<void*>;
        using microseconds = std::chrono::duration<double, std::micro>;
        using milliseconds = std::chrono::duration<double, std::milli>;

        constexpr int NUM_ATTEMPTS = 1000;
        constexpr milliseconds WARMUP_TIME{2000.0};

        const auto& minMax = params.second;

        ov::nvidia_gpu::ThreadContext threadContext{{}};
        ov::nvidia_gpu::OperationBase::Ptr operation = [&] {
            const bool optimizeOption = false;
            auto param = std::make_shared<ov::op::v0::Parameter>(ov::element::from<T>(), ov::PartialShape{shape.first});
            auto node = std::make_shared<ov::op::v0::Clamp>(param->output(0), minMax[0], minMax[1]);

            auto& registry = ov::nvidia_gpu::OperationRegistry::getInstance();
            auto op = registry.createOperation(ov::nvidia_gpu::CreationContext{threadContext.device(), optimizeOption},
                                               node,
                                               std::array{ov::nvidia_gpu::TensorID{0}},
                                               std::array{ov::nvidia_gpu::TensorID{0}});
            return op;
        }();
        const int tesnorSize = ov::shape_size(shape.first);
        const auto tensorSizeBytes = tesnorSize * sizeof(T);
        auto& stream = threadContext.stream();
        CUDA::Allocation inAlloc = stream.malloc(tensorSizeBytes);
        CUDA::Allocation outAlloc = stream.malloc(tensorSizeBytes);
        std::vector<CDevPtr> inputs{inAlloc};
        std::vector<DevPtr> outputs{outAlloc};

        std::vector<std::shared_ptr<ngraph::runtime::Tensor>> emptyTensor;
        std::map<std::string, std::size_t> emptyMapping;
        ov::nvidia_gpu::CancellationToken token{};
        ov::nvidia_gpu::CudaGraph graph{ov::nvidia_gpu::CreationContext{CUDA::Device{}, false}, {}};
        ov::nvidia_gpu::Profiler profiler{false, graph};
        ov::nvidia_gpu::InferenceRequestContext context{
            emptyTensor, emptyMapping, emptyTensor, emptyMapping, threadContext, token, profiler};

        std::vector<T> inHost(tesnorSize);
        std::random_device rDevice;
        std::mt19937 mersenneEngine{rDevice()};
        std::uniform_int_distribution<int> dist{std::numeric_limits<int>::min(), std::numeric_limits<int>::max()};
        auto genDict = [&dist, &mersenneEngine]() {
            return static_cast<T>(10.f * dist(mersenneEngine) / static_cast<float>(std::numeric_limits<int>::max()));
        };
        std::generate(inHost.begin(), inHost.end(), genDict);
        stream.upload(inAlloc, inHost.data(), tensorSizeBytes);

        const auto minMaxSizeBytes = sizeof(T);
        CUDA::Allocation maxAlloc = stream.malloc(minMaxSizeBytes);
        CUDA::Allocation minAlloc = stream.malloc(minMaxSizeBytes);

        ov::nvidia_gpu::Workbuffers workbuffers{};
        ov::nvidia_gpu::WorkbufferRequest wbRequest{operation->GetWorkBufferRequest()};
        if (!wbRequest.immutable_sizes.empty()) {
            OPENVINO_ASSERT(wbRequest.immutable_sizes.size() == 2);
            OPENVINO_ASSERT(wbRequest.immutable_sizes[0] == minMaxSizeBytes &&
                            wbRequest.immutable_sizes[1] == minMaxSizeBytes);

            ov::nvidia_gpu::IOperationExec::Buffers initBuffers{static_cast<DevPtr>(maxAlloc),
                                                            static_cast<DevPtr>(minAlloc)};
            operation->InitSharedImmutableWorkbuffers(initBuffers);

            workbuffers.immutable_buffers.emplace_back(static_cast<CDevPtr>(maxAlloc));
            workbuffers.immutable_buffers.emplace_back(static_cast<CDevPtr>(minAlloc));
        }

        // Warmup
        auto warmCur = std::chrono::steady_clock::now();
        const auto warmEnd = warmCur + WARMUP_TIME;
        while (warmCur <= warmEnd) {
            operation->Execute(context, inputs, outputs, workbuffers);
            stream.synchronize();
            warmCur = std::chrono::steady_clock::now();
        }

        // Benchmark
        const auto start = std::chrono::steady_clock::now();
        for (int i = 0; i < NUM_ATTEMPTS; ++i) {
            operation->Execute(context, inputs, outputs, workbuffers);
            stream.synchronize();
        }
        const auto end = std::chrono::steady_clock::now();
        microseconds averageExecTime = (end - start) / NUM_ATTEMPTS;
        std::cout << std::fixed << std::setfill('0') << "Clamp " << CommonTestUtils::vec2str(shape.first)
                  << ", minMax = " << CommonTestUtils::vec2str(minMax) << ": " << averageExecTime.count() << " us\n";
    }
};

TEST_F(ClampBenchmark, DISABLED_benchmark) {
    std::cout << "---Clamp Generated shapes - float---\n";
    for (const auto& p : autogen_Clamp_all_params) {
        testOneShape<float>(p.get().first, p.get().second);
    }
    std::cout << "---Clamp Generated shapes - ov::float16---\n";
    for (const auto& p : autogen_Clamp_all_params) {
        testOneShape<float>(p.get().first, p.get().second);
    }
    std::cout << "---Clamp Big shapes - float---\n";
    testOneShape<float>(clampParamsBig, clampInShapeBig);
    std::cout << "---Clamp Big shapes - ov::float16---\n";
    testOneShape<ov::float16>(clampParamsBig, clampInShapeBig);
}

}  // namespace benchmark

// =============================================================================

// ------------- Swish -------------
const std::initializer_list<std::pair<ngraph::helpers::ActivationTypes, std::vector<float>>> smoke_SwishParams{
    {ngraph::helpers::Swish, {0.59}}, {ngraph::helpers::Swish, {1.0}}, {ngraph::helpers::Swish, {-3.277}}};

const std::initializer_list<std::initializer_list<std::size_t>> smoke_SwishShapes{
    {1},
    {2},
    {1, 1},
    {2, 2},
    {1, 2, 3, 4, 5},
};
INSTANTIATE_TEST_CASE_P(smoke_Swish,
                        ActivationLayerTest,
                        ::testing::Combine(::testing::ValuesIn(smoke_SwishParams),
                                           ::testing::ValuesIn(std::vector<InferenceEngine::Precision>(
                                               {InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
                                           ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
                                           ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
                                           ::testing::Values(InferenceEngine::Layout::ANY),
                                           ::testing::Values(InferenceEngine::Layout::ANY),
                                           ::testing::ValuesIn(listToVectors(smoke_SwishShapes)),
                                           ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
                        ActivationLayerTest::getTestCaseName);

// clang-format off
// {AUTOGENERATED_TESTS_BEGIN_TAG_SWISH}

// Attrs:  {}
// In:     (1, 10, 1, 1)
// Out:    (1, 10, 1, 1)
// Operators: 'efficientdet-d1-tf:opid181' [FP16, FP32], 'efficientdet-d1-tf:opid209' [FP16, FP32], 'efficientdet-d1-tf:opid241' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid181,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 10, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1152, 20, 20)
// Out:    (1, 1152, 20, 20)
// Operators: 'efficientdet-d1-tf:opid482' [FP16, FP32], 'efficientdet-d1-tf:opid487' [FP16, FP32], 'efficientdet-d1-tf:opid510' [FP16, FP32], 'efficientdet-d1-tf:opid515' [FP16, FP32], 'efficientdet-d1-tf:opid538' [FP16, FP32], 'efficientdet-d1-tf:opid543' [FP16, FP32], 'efficientdet-d1-tf:opid566' [FP16, FP32], 'efficientdet-d1-tf:opid571' [FP16, FP32], 'efficientdet-d1-tf:opid594' [FP16, FP32], 'efficientdet-d1-tf:opid599' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid482,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1152, 20, 20}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 40, 40)
// Out:    (1, 128, 40, 40)
// Operators: 'yolov5-640x640-FP32-IR:opid134' [FP32], 'yolov5-640x640-FP32-IR:opid139' [FP32], 'yolov5-640x640-FP32-IR:opid144' [FP32], 'yolov5-640x640-FP32-IR:opid150' [FP32], 'yolov5-640x640-FP32-IR:opid155' [FP32], 'yolov5-640x640-FP32-IR:opid161' [FP32], 'yolov5-640x640-FP32-IR:opid166' [FP32], 'yolov5-640x640-FP32-IR:opid172' [FP32], 'yolov5-640x640-FP32-IR:opid249' [FP32], 'yolov5-640x640-FP32-IR:opid254' [FP32], 'yolov5-640x640-FP32-IR:opid259' [FP32], 'yolov5-640x640-FP32-IR:opid264' [FP32], 'yolov5-640x640-FP32-IR:opid275' [FP32], 'yolov5-640x640-FP32-IR:opid375' [FP32], 'yolov5-640x640-FP32-IR:opid381' [FP32], 'yolov5-640x640-FP32-IR:opid386' [FP32], 'yolov5-640x640-FP32-IR:opid391' [FP32], 'yolov5-640x640-FP32-IR:opid396' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_yolov5_640x640_FP32_IR_opid134,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 40, 40}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 128, 80, 80)
// Out:    (1, 128, 80, 80)
// Operators: 'yolov5-640x640-FP32-IR:opid124' [FP32], 'yolov5-640x640-FP32-IR:opid317' [FP32], 'yolov5-640x640-FP32-IR:opid75' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_yolov5_640x640_FP32_IR_opid124,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 128, 80, 80}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 144, 160, 160)
// Out:    (1, 144, 160, 160)
// Operators: 'efficientdet-d1-tf:opid114' [FP16, FP32], 'efficientdet-d1-tf:opid119' [FP16, FP32], 'efficientdet-d1-tf:opid142' [FP16, FP32], 'efficientdet-d1-tf:opid86' [FP16, FP32], 'efficientdet-d1-tf:opid91' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid114,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 144, 160, 160}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 144, 80, 80)
// Out:    (1, 144, 80, 80)
// Operators: 'efficientdet-d1-tf:opid147' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid147,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 144, 80, 80}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 16, 320, 320)
// Out:    (1, 16, 320, 320)
// Operators: 'efficientdet-d1-tf:opid36' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid36,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 16, 320, 320}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 1920, 20, 20)
// Out:    (1, 1920, 20, 20)
// Operators: 'efficientdet-d1-tf:opid621' [FP16, FP32], 'efficientdet-d1-tf:opid626' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid621,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 1920, 20, 20}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 20, 1, 1)
// Out:    (1, 20, 1, 1)
// Operators: 'efficientdet-d1-tf:opid268' [FP16, FP32], 'efficientdet-d1-tf:opid296' [FP16, FP32], 'efficientdet-d1-tf:opid324' [FP16, FP32], 'efficientdet-d1-tf:opid352' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid268,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 20, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 240, 40, 40)
// Out:    (1, 240, 40, 40)
// Operators: 'efficientdet-d1-tf:opid234' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid234,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 240, 40, 40}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 240, 80, 80)
// Out:    (1, 240, 80, 80)
// Operators: 'efficientdet-d1-tf:opid169' [FP16, FP32], 'efficientdet-d1-tf:opid174' [FP16, FP32], 'efficientdet-d1-tf:opid197' [FP16, FP32], 'efficientdet-d1-tf:opid202' [FP16, FP32], 'efficientdet-d1-tf:opid229' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid169,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 240, 80, 80}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 20, 20)
// Out:    (1, 256, 20, 20)
// Operators: 'yolov5-640x640-FP32-IR:opid188' [FP32], 'yolov5-640x640-FP32-IR:opid202' [FP32], 'yolov5-640x640-FP32-IR:opid207' [FP32], 'yolov5-640x640-FP32-IR:opid212' [FP32], 'yolov5-640x640-FP32-IR:opid217' [FP32], 'yolov5-640x640-FP32-IR:opid228' [FP32], 'yolov5-640x640-FP32-IR:opid460' [FP32], 'yolov5-640x640-FP32-IR:opid466' [FP32], 'yolov5-640x640-FP32-IR:opid471' [FP32], 'yolov5-640x640-FP32-IR:opid476' [FP32], 'yolov5-640x640-FP32-IR:opid481' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_yolov5_640x640_FP32_IR_opid188,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 20, 20}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 256, 40, 40)
// Out:    (1, 256, 40, 40)
// Operators: 'yolov5-640x640-FP32-IR:opid129' [FP32], 'yolov5-640x640-FP32-IR:opid178' [FP32], 'yolov5-640x640-FP32-IR:opid270' [FP32], 'yolov5-640x640-FP32-IR:opid402' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_yolov5_640x640_FP32_IR_opid129,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 256, 40, 40}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 28, 1, 1)
// Out:    (1, 28, 1, 1)
// Operators: 'efficientdet-d1-tf:opid379' [FP16, FP32], 'efficientdet-d1-tf:opid407' [FP16, FP32], 'efficientdet-d1-tf:opid435' [FP16, FP32], 'efficientdet-d1-tf:opid467' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid379,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 28, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 160, 160)
// Out:    (1, 32, 160, 160)
// Operators: 'yolov5-640x640-FP32-IR:opid48' [FP32], 'yolov5-640x640-FP32-IR:opid53' [FP32], 'yolov5-640x640-FP32-IR:opid58' [FP32], 'yolov5-640x640-FP32-IR:opid64' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_yolov5_640x640_FP32_IR_opid48,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 160, 160}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 32, 320, 320)
// Out:    (1, 32, 320, 320)
// Operators: 'efficientdet-d1-tf:opid14' [FP16, FP32], 'efficientdet-d1-tf:opid9' [FP16, FP32], 'yolov5-640x640-FP32-IR:opid38' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid14,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 32, 320, 320}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 4, 1, 1)
// Out:    (1, 4, 1, 1)
// Operators: 'efficientdet-d1-tf:opid43' [FP16, FP32], 'efficientdet-d1-tf:opid71' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid43,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 4, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 48, 1, 1)
// Out:    (1, 48, 1, 1)
// Operators: 'efficientdet-d1-tf:opid494' [FP16, FP32], 'efficientdet-d1-tf:opid522' [FP16, FP32], 'efficientdet-d1-tf:opid550' [FP16, FP32], 'efficientdet-d1-tf:opid578' [FP16, FP32], 'efficientdet-d1-tf:opid606' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid494,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 48, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 480, 40, 40)
// Out:    (1, 480, 40, 40)
// Operators: 'efficientdet-d1-tf:opid256' [FP16, FP32], 'efficientdet-d1-tf:opid261' [FP16, FP32], 'efficientdet-d1-tf:opid284' [FP16, FP32], 'efficientdet-d1-tf:opid289' [FP16, FP32], 'efficientdet-d1-tf:opid312' [FP16, FP32], 'efficientdet-d1-tf:opid317' [FP16, FP32], 'efficientdet-d1-tf:opid340' [FP16, FP32], 'efficientdet-d1-tf:opid345' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid256,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 480, 40, 40}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 512, 20, 20)
// Out:    (1, 512, 20, 20)
// Operators: 'yolov5-640x640-FP32-IR:opid183' [FP32], 'yolov5-640x640-FP32-IR:opid197' [FP32], 'yolov5-640x640-FP32-IR:opid223' [FP32], 'yolov5-640x640-FP32-IR:opid487' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_yolov5_640x640_FP32_IR_opid183,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 512, 20, 20}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 6, 1, 1)
// Out:    (1, 6, 1, 1)
// Operators: 'efficientdet-d1-tf:opid126' [FP16, FP32], 'efficientdet-d1-tf:opid154' [FP16, FP32], 'efficientdet-d1-tf:opid98' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid126,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 6, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 160, 160)
// Out:    (1, 64, 160, 160)
// Operators: 'yolov5-640x640-FP32-IR:opid43' [FP32], 'yolov5-640x640-FP32-IR:opid70' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_yolov5_640x640_FP32_IR_opid43,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 160, 160}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 64, 80, 80)
// Out:    (1, 64, 80, 80)
// Operators: 'yolov5-640x640-FP32-IR:opid101' [FP32], 'yolov5-640x640-FP32-IR:opid107' [FP32], 'yolov5-640x640-FP32-IR:opid112' [FP32], 'yolov5-640x640-FP32-IR:opid118' [FP32], 'yolov5-640x640-FP32-IR:opid296' [FP32], 'yolov5-640x640-FP32-IR:opid301' [FP32], 'yolov5-640x640-FP32-IR:opid306' [FP32], 'yolov5-640x640-FP32-IR:opid311' [FP32], 'yolov5-640x640-FP32-IR:opid80' [FP32], 'yolov5-640x640-FP32-IR:opid85' [FP32], 'yolov5-640x640-FP32-IR:opid90' [FP32], 'yolov5-640x640-FP32-IR:opid96' [FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_yolov5_640x640_FP32_IR_opid101,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 64, 80, 80}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 672, 20, 20)
// Out:    (1, 672, 20, 20)
// Operators: 'efficientdet-d1-tf:opid460' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid460,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 672, 20, 20}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 672, 40, 40)
// Out:    (1, 672, 40, 40)
// Operators: 'efficientdet-d1-tf:opid367' [FP16, FP32], 'efficientdet-d1-tf:opid372' [FP16, FP32], 'efficientdet-d1-tf:opid395' [FP16, FP32], 'efficientdet-d1-tf:opid400' [FP16, FP32], 'efficientdet-d1-tf:opid423' [FP16, FP32], 'efficientdet-d1-tf:opid428' [FP16, FP32], 'efficientdet-d1-tf:opid455' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid367,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 672, 40, 40}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 8, 1, 1)
// Out:    (1, 8, 1, 1)
// Operators: 'efficientdet-d1-tf:opid21' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid21,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 8, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 80, 1, 1)
// Out:    (1, 80, 1, 1)
// Operators: 'efficientdet-d1-tf:opid633' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid633,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 80, 1, 1}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 88, 10, 10)
// Out:    (1, 88, 10, 10)
// Operators: 'efficientdet-d1-tf:opid1017' [FP16, FP32], 'efficientdet-d1-tf:opid1194' [FP16, FP32], 'efficientdet-d1-tf:opid1207' [FP16, FP32], 'efficientdet-d1-tf:opid1214' [FP16, FP32], 'efficientdet-d1-tf:opid1221' [FP16, FP32], 'efficientdet-d1-tf:opid1378' [FP16, FP32], 'efficientdet-d1-tf:opid1385' [FP16, FP32], 'efficientdet-d1-tf:opid1392' [FP16, FP32], 'efficientdet-d1-tf:opid662' [FP16, FP32], 'efficientdet-d1-tf:opid756' [FP16, FP32], 'efficientdet-d1-tf:opid783' [FP16, FP32], 'efficientdet-d1-tf:opid873' [FP16, FP32], 'efficientdet-d1-tf:opid900' [FP16, FP32], 'efficientdet-d1-tf:opid990' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid1017,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 88, 10, 10}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 88, 20, 20)
// Out:    (1, 88, 20, 20)
// Operators: 'efficientdet-d1-tf:opid1029' [FP16, FP32], 'efficientdet-d1-tf:opid1147' [FP16, FP32], 'efficientdet-d1-tf:opid1160' [FP16, FP32], 'efficientdet-d1-tf:opid1167' [FP16, FP32], 'efficientdet-d1-tf:opid1174' [FP16, FP32], 'efficientdet-d1-tf:opid1347' [FP16, FP32], 'efficientdet-d1-tf:opid1354' [FP16, FP32], 'efficientdet-d1-tf:opid1361' [FP16, FP32], 'efficientdet-d1-tf:opid674' [FP16, FP32], 'efficientdet-d1-tf:opid738' [FP16, FP32], 'efficientdet-d1-tf:opid795' [FP16, FP32], 'efficientdet-d1-tf:opid855' [FP16, FP32], 'efficientdet-d1-tf:opid912' [FP16, FP32], 'efficientdet-d1-tf:opid972' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid1029,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 88, 20, 20}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 88, 40, 40)
// Out:    (1, 88, 40, 40)
// Operators: 'efficientdet-d1-tf:opid1041' [FP16, FP32], 'efficientdet-d1-tf:opid1100' [FP16, FP32], 'efficientdet-d1-tf:opid1113' [FP16, FP32], 'efficientdet-d1-tf:opid1120' [FP16, FP32], 'efficientdet-d1-tf:opid1127' [FP16, FP32], 'efficientdet-d1-tf:opid1316' [FP16, FP32], 'efficientdet-d1-tf:opid1323' [FP16, FP32], 'efficientdet-d1-tf:opid1330' [FP16, FP32], 'efficientdet-d1-tf:opid686' [FP16, FP32], 'efficientdet-d1-tf:opid718' [FP16, FP32], 'efficientdet-d1-tf:opid807' [FP16, FP32], 'efficientdet-d1-tf:opid837' [FP16, FP32], 'efficientdet-d1-tf:opid924' [FP16, FP32], 'efficientdet-d1-tf:opid954' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid1041,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 88, 40, 40}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 88, 5, 5)
// Out:    (1, 88, 5, 5)
// Operators: 'efficientdet-d1-tf:opid1005' [FP16, FP32], 'efficientdet-d1-tf:opid1238' [FP16, FP32], 'efficientdet-d1-tf:opid1251' [FP16, FP32], 'efficientdet-d1-tf:opid1258' [FP16, FP32], 'efficientdet-d1-tf:opid1265' [FP16, FP32], 'efficientdet-d1-tf:opid1409' [FP16, FP32], 'efficientdet-d1-tf:opid1416' [FP16, FP32], 'efficientdet-d1-tf:opid1423' [FP16, FP32], 'efficientdet-d1-tf:opid771' [FP16, FP32], 'efficientdet-d1-tf:opid888' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid1005,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 88, 5, 5}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 88, 80, 80)
// Out:    (1, 88, 80, 80)
// Operators: 'efficientdet-d1-tf:opid1053' [FP16, FP32], 'efficientdet-d1-tf:opid1066' [FP16, FP32], 'efficientdet-d1-tf:opid1073' [FP16, FP32], 'efficientdet-d1-tf:opid1080' [FP16, FP32], 'efficientdet-d1-tf:opid1285' [FP16, FP32], 'efficientdet-d1-tf:opid1292' [FP16, FP32], 'efficientdet-d1-tf:opid1299' [FP16, FP32], 'efficientdet-d1-tf:opid698' [FP16, FP32], 'efficientdet-d1-tf:opid819' [FP16, FP32], 'efficientdet-d1-tf:opid936' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid1053,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 88, 80, 80}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 160, 160)
// Out:    (1, 96, 160, 160)
// Operators: 'efficientdet-d1-tf:opid64' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid64,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 160, 160}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);


// Attrs:  {}
// In:     (1, 96, 320, 320)
// Out:    (1, 96, 320, 320)
// Operators: 'efficientdet-d1-tf:opid59' [FP16, FP32]
INSTANTIATE_TEST_CASE_P(
    autogen_Swish_efficientdet_d1_tf_opid59,
    ActivationLayerTest,
    ::testing::Combine(
        ::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Swish, {1.0}}),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32, InferenceEngine::Precision::FP16})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(std::pair<std::vector<size_t>, std::vector<size_t>>{{1, 96, 320, 320}, {}}),
        ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);

// {AUTOGENERATED_TESTS_END_TAG_SWISH}
// clang-format on
// =============================================================================

// Yolov5s Floor parameters
const std::initializer_list<std::initializer_list<std::size_t>> Floor_shapes = {{4}};

INSTANTIATE_TEST_CASE_P(
    Floor_Yolov5s,
    ActivationLayerTest,
    ::testing::Combine(::testing::Values(std::pair<ngraph::helpers::ActivationTypes, float>{ngraph::helpers::Floor, 0}),
                       ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({InferenceEngine::Precision::FP32,
                                                                                    InferenceEngine::Precision::FP16})),
                       ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
                       ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
                       ::testing::Values(InferenceEngine::Layout::ANY),
                       ::testing::Values(InferenceEngine::Layout::ANY),
                       ::testing::ValuesIn(listToVectors(Floor_shapes)),
                       ::testing::Values(CommonTestUtils::DEVICE_NVIDIA)),
    ActivationLayerTest::getTestCaseName);

}  // namespace
}  // namespace LayerTestsDefinitions
