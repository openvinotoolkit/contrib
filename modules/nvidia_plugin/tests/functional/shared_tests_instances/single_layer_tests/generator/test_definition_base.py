#!/usr/bin/env python3

import utils


class CommonTestTraits:
    @property
    def default_net_precisions(self):
        return ['FP32', 'FP16']

    @property
    def cpp_test_file_begin_tag(self):
        return '{AUTOGENERATED_TESTS_BEGIN_TAG}'

    @property
    def cpp_test_file_end_tag(self):
        return '{AUTOGENERATED_TESTS_END_TAG}'


class TestParamsProviderBase:
    def __init__(self, list_of_equal_operators, test_traits):
        self.equal_operators = list_of_equal_operators
        self.test_traits = test_traits

        self.cfg_test_is_disabled = False
        self.cfg_cpp_test_class_name = self.test_traits.default_cpp_test_class_name
        self.cfg_net_precisions_list = self.test_traits.default_net_precisions

        aliases = self.aliases
        aliases.sort()
        test_name = "autogen_{}_{}".format(self.test_traits.operator_ir_type_string, aliases[0])
        test_name = test_name.replace(':', '_')
        test_name = test_name.replace('.', '_')
        test_name = test_name.replace('-', '_')
        self.unique_test_name = test_name

    @property
    def op(self):
        return self.equal_operators[0]

    @property
    def equal_operator_ids(self):  # returns the list of ir_model.IROperatorID objects
        return list(map(lambda op: op.id, self.equal_operators))

    @property
    def aliases(self):
        return list(map(lambda id: id.alias_str(), self.equal_operator_ids))

    def __repr__(self):
        s = '\nTestParamsProvider. Equal operators: ['
        s += '\n\t'.join(map(lambda ir_op: ir_op.__repr__().replace('\n', '\n\t'), self.equal_operators))
        s += '\n]'
        return s

    @property
    def title_comment(self):
        s = ""
        s += "// Attrs:  {}\n".format(self.op.attributes_as_str())
        s += "// In:     {}\n".format(self.op.inputs_as_str())
        s += "// Out:    {}\n".format(self.op.outputs_as_str())

        operator_aliases = dict()  # 'model_name:opidXX' -> set {precision1, precision2, ...}
        for id in self.equal_operator_ids:
            key = id.alias_str()
            set_of_precisions = operator_aliases.get(key)
            if not set_of_precisions:
                set_of_precisions = set()
                operator_aliases[key] = set_of_precisions
            set_of_precisions.add(id.modelID.precision)
        operators_str_list = list()
        for alias_str, set_of_precisions in sorted(operator_aliases.items()):
            operators_str_list.append("'{}' [{}]".format(alias_str, ', '.join(sorted(list(set_of_precisions)))))
        s += "// Operators: {}\n".format(", ".join(operators_str_list))

        return s.strip()

    @property
    def cpp_test_name(self):
        if self.cfg_test_is_disabled:
            return 'DISABLED_' + self.unique_test_name
        else:
            return self.unique_test_name

    @property
    def cpp_test_class_name(self):
        return self.cfg_cpp_test_class_name

    @property
    def cpp_net_precisions(self):
        return utils.cpp_precision_list(self.cfg_net_precisions_list)
