using {{test_traits.cpp_alias_name}} = std::pair<
    std::pair<ActivationTypes, std::vector<float>>,
    std::pair<std::vector<size_t>, std::vector<size_t>>>;

{%- for op in operators %}
{{op.title_comment}}
{{op.cpp_params_decl}}
INSTANTIATE_TEST_CASE_P(
    {{op.cpp_test_name}},
    {{op.cpp_test_class_name}},
    ::testing::Combine(
        ::testing::Values({{op.cpp_params_name}}.first),
        ::testing::ValuesIn(std::vector<InferenceEngine::Precision>({{op.cpp_net_precisions}})),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Precision::UNSPECIFIED),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values(InferenceEngine::Layout::ANY),
        ::testing::Values({{op.cpp_params_name}}.second),
        ::testing::Values(ov::test::utils::DEVICE_NVIDIA)),
    {{op.cpp_test_class_name}}::getTestCaseName);

{% endfor -%}


const std::vector<std::reference_wrapper<const {{test_traits.cpp_alias_name}}>> autogen_Clamp_all_params{
{%- for op in operators %}
    {{op.cpp_params_name}},
{%- endfor %}
};


