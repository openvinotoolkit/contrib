diff --git a/inference-engine/samples/hello_classification/CMakeLists.txt b/inference-engine/samples/hello_classification/CMakeLists.txt
index 9b0509bab..40b298319 100644
--- a/inference-engine/samples/hello_classification/CMakeLists.txt
+++ b/inference-engine/samples/hello_classification/CMakeLists.txt
@@ -7,3 +7,4 @@ ie_add_sample(NAME hello_classification
               DEPENDENCIES ie_samples_utils
               OPENCV_DEPENDENCIES core imgcodecs)
 
+add_dependencies(hello_classification openvino_nvidia_gpu_plugin)
diff --git a/inference-engine/samples/hello_classification/main.cpp b/inference-engine/samples/hello_classification/main.cpp
index 858a87ead..25509e21d 100644
--- a/inference-engine/samples/hello_classification/main.cpp
+++ b/inference-engine/samples/hello_classification/main.cpp
@@ -26,6 +26,7 @@ using namespace InferenceEngine;
     #define tcout                  std::cout
     #define file_name_t            std::string
     #define imread_t               cv::imread
+    #define imread_grayscale_t(image_path) cv::imread(image_path, cv::IMREAD_GRAYSCALE)
     #define ClassificationResult_t ClassificationResult
 #endif
 
@@ -76,19 +77,34 @@ int wmain(int argc, wchar_t* argv[]) {
 int main(int argc, char* argv[]) {
 #endif
     try {
-        // ------------------------------ Parsing and validation of input arguments
-        // ---------------------------------
-        if (argc != 4) {
+        // ------------------------------ Parsing and validation of input args ---------------------------------
+        if (argc != 4 && argc != 5) {
             tcout << "Usage : " << argv[0] << " <path_to_model> <path_to_image> <device_name>" << std::endl;
             return EXIT_FAILURE;
         }
 
-        const file_name_t input_model {argv[1]};
-        const file_name_t input_image_path {argv[2]};
+        const file_name_t input_model{argv[1]};
+        const file_name_t input_image_path{argv[2]};
+        std::string tumorImagePath;
+        if (argc == 5) {
+          tumorImagePath = argv[3];
+        } else {
+          tumorImagePath = "tumor.jpg";
+        }
 #if defined(ENABLE_UNICODE_PATH_SUPPORT) && defined(_WIN32)
-        const std::string device_name = simpleConvert(argv[3]);
+        std::string device_name;
+        if (argc == 4) {
+          device_name = argv[3];
+        } else {
+          device_name = argv[4];
+        }
 #else
-        const std::string device_name {argv[3]};
+        std::string device_name;
+        if (argc == 4) {
+          device_name = argv[3];
+        } else {
+          device_name = argv[4];
+        }
 #endif
         // -----------------------------------------------------------------------------------------------------
 
@@ -118,6 +134,7 @@ int main(int argc, char* argv[]) {
          * infer request. Resize and layout conversions are executed automatically
          * during inference */
         input_info->getPreProcess().setResizeAlgorithm(RESIZE_BILINEAR);
+        input_info->getPreProcess().setColorFormat(ColorFormat::RAW);
         input_info->setLayout(Layout::NHWC);
         input_info->setPrecision(Precision::U8);
 
@@ -133,9 +150,11 @@ int main(int argc, char* argv[]) {
         output_info->setPrecision(Precision::FP32);
         // -----------------------------------------------------------------------------------------------------
 
-        // --------------------------- Step 4. Loading a model to the device
-        // ------------------------------------------
-        ExecutableNetwork executable_network = ie.LoadNetwork(network, device_name);
+        // --------------------------- 4. Loading model to the device ------------------------------------------
+        ExecutableNetwork executable_network = ie.LoadNetwork(network, device_name,
+        {
+            {{"CUDA_THROUGHPUT_STREAMS", "1"}},
+        });
         // -----------------------------------------------------------------------------------------------------
 
         // --------------------------- Step 5. Create an infer request
@@ -143,13 +162,10 @@ int main(int argc, char* argv[]) {
         InferRequest infer_request = executable_network.CreateInferRequest();
         // -----------------------------------------------------------------------------------------------------
 
-        // --------------------------- Step 6. Prepare input
-        // --------------------------------------------------------
-        /* Read input image to a blob and set it to an infer request without resize
-         * and layout conversions. */
-        cv::Mat image = imread_t(input_image_path);
-        Blob::Ptr imgBlob = wrapMat2Blob(image);     // just wrap Mat data by Blob::Ptr
-                                                     // without allocating of new memory
+        // --------------------------- 6. Prepare input --------------------------------------------------------
+        /* Read input image to a blob and set it to an infer request without resize and layout conversions. */
+        cv::Mat image = imread_grayscale_t(input_image_path);
+        Blob::Ptr imgBlob = wrapMat2Blob(image);  // just wrap Mat data by Blob::Ptr without allocating of new memory
         infer_request.SetBlob(input_name, imgBlob);  // infer_request accepts input blob of any size
         // -----------------------------------------------------------------------------------------------------
 
@@ -162,9 +178,16 @@ int main(int argc, char* argv[]) {
         // --------------------------- Step 8. Process output
         // ------------------------------------------------------
         Blob::Ptr output = infer_request.GetBlob(output_name);
-        // Print classification results
-        ClassificationResult_t classificationResult(output, {input_image_path});
-        classificationResult.print();
+        // Save image to file
+        auto outputBuffer = output->buffer();
+        cv::Mat imageTumor(128, 128, CV_32SC1, outputBuffer.as<uint32_t*>());
+        if (std::string::npos == tumorImagePath.find('/')) {
+          auto slashPos = input_image_path.find_last_of('/');
+          auto basePath = input_image_path.substr(0, slashPos);
+          cv::imwrite(basePath + "/" + tumorImagePath, imageTumor);
+        } else {
+          cv::imwrite(tumorImagePath, imageTumor);
+        }
         // -----------------------------------------------------------------------------------------------------
     } catch (const std::exception& ex) {
         std::cerr << ex.what() << std::endl;
