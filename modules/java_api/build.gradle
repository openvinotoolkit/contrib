buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

allprojects {
    apply plugin: "com.jfrog.artifactory"
}

def native_resources = [
    System.getenv('INTEL_OPENVINO_DIR') + "/runtime/lib/intel64",  // UNIX
    System.getenv('INTEL_OPENVINO_DIR') + "/runtime/bin/intel64/Release",  // Windows
    System.getenv('TBB_DIR') + "/../lib/",
]

def resources_list = ""
native_resources.each {
    def tree = fileTree(it) {
        include '*'
    }
    tree.visit { FileVisitDetails details ->
        if (!details.file.isDirectory()) {
            resources_list += details.file.name + "\n"
        }
    }
}

file('native').mkdirs()
file('native/resources_list.txt').text = "${resources_list}"

sourceSets {
    main {
        java {
            srcDirs = ["org"]
        }
        resources {
            srcDirs = native_resources
            srcDir 'native'
        }
    }
    test {
        java {
            srcDirs = ["."]
            include "tests/compatibility/*.java", "tests/*.java"
        }
    }
}

repositories {
    jcenter()
}
dependencies {
    testImplementation "junit:junit:4.13.1"
    testImplementation "org.hamcrest:hamcrest-core:1.3"
}

test {
    systemProperty 'MODELS_PATH', System.getProperty('MODELS_PATH')
    systemProperty 'device', System.getProperty('device')
}
test.onlyIf { project.hasProperty('run_tests') }

//
// Bintray publication:
// $ export ARTIFACTORY_USER=<USERNAME>
// $ export ARTIFACTORY_PASS=<TOKEN>
// $ export VERSION=<VERSION>
// $ gradle artifactoryPublish
//

version = System.getenv('VERSION')

artifactory {
    contextUrl = "https://openvino.jfrog.io/artifactory"
    publish {
        repository {
            repoKey = 'openvino-gradle-dev-local'
            username = System.getenv('ARTIFACTORY_USER')
            password = System.getenv('ARTIFACTORY_PASS')
            maven = true
        }
        defaults {
            publications('OpenVINOPublication')
        }
        publishBuildInfo = true
        publishArtifacts = true
        publishPom = true
    }
    resolve {
        repository {
            repoKey = 'openvino-gradle-dev'
            username = System.getenv('ARTIFACTORY_USER')
            password = System.getenv('ARTIFACTORY_PASS')
            maven = true
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "developer-id"
            name "developer-name"
            email "dev@d.com"
        }
    }

    scm {
       url "https://github.com/openvinotoolkit/openvino_contrib"
    }
}

publishing {
    publications {
        OpenVINOPublication(MavenPublication) {
            from(components.java)
            groupId 'org.intel'
            artifactId 'openvino'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Java bindings for Intel OpenVINO')
                root.appendNode('name', 'Intel OpenVINO')
                root.appendNode('url', 'https://github.com/openvinotoolkit/openvino_contrib')
                root.children().last() + pomConfig
            }
        }
    }
}
