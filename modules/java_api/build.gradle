plugins {
    id 'java-library'
}

import org.gradle.internal.os.OperatingSystem
println 'Operating system: ' + OperatingSystem.current()

def nativesCPP;
def openvinoVersion = "2023.0"

def native_resources = []
def tbb_dir = System.getenv('TBB_DIR')
if (tbb_dir) {
    if (new File(tbb_dir + "/../lib/").exists()) {
        native_resources.add(tbb_dir + "/../lib/");
    } else {
        native_resources.add(tbb_dir + "/../../");
    }
}

if (OperatingSystem.current().isMacOsX()) {
    nativesCPP = 'macosx-x86_64'
    native_resources.add(System.getenv('INTEL_OPENVINO_DIR') + "/runtime/lib/intel64/Release");
} else if (OperatingSystem.current().isLinux()) {
    nativesCPP = 'linux-x86_64'
    native_resources.add(System.getenv('INTEL_OPENVINO_DIR') + "/runtime/lib/intel64");
} else if (OperatingSystem.current().isWindows()) {
    nativesCPP = 'windows-x86_64'
    native_resources.add(System.getenv('INTEL_OPENVINO_DIR') + "/runtime/bin/intel64/Release");
} else {
    logger.warn('Unknown operating system!')
}

project.version = "${openvinoVersion}-${nativesCPP}"

def resources_list = ""
native_resources.each {
    def tree = fileTree(it) {
        include '*'
    }
    tree.visit { FileVisitDetails details ->
        if (!details.file.isDirectory()) {
            resources_list += details.file.name + "\n"
        }
    }
}
file('native').mkdirs()
file('native/resources_list.txt').text = "${resources_list}"
sourceSets {
    main {
        java {
            srcDirs = ["org"]
        }
        resources {
            srcDirs = native_resources
            srcDir 'native'
        }
    }
    test {
        java {
            srcDirs = ["."]
            include "tests/compatibility/*.java", "tests/*.java"
        }
    }
}
repositories{
    mavenCentral()
}
dependencies {
    testImplementation "junit:junit:4.13.1"
    testImplementation "org.hamcrest:hamcrest-core:1.3"
}
test {
    systemProperty 'MODELS_PATH', System.getProperty('MODELS_PATH')
    systemProperty 'device', System.getProperty('device')
}
test.onlyIf { project.hasProperty('run_tests') }
