#This Dockerfile is for x86 and should be used for OpenVINO ARM plugin cross-compilation
#https://github.com/openvinotoolkit/openvino_contrib/tree/master/modules/arm_plugin#how-to-build

FROM debian:9

ENV DEBIAN_FRONTEND noninteractive
ENV PAKAGE_UPDATES_OF 20210215

#Prerequisite installation
RUN apt-get update && \
    apt-get -y upgrade && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        lsb-release \
        nano \
        wget \
        curl \
        nano \
        tar \
        bzip2 \
        unzip \
        cpio \
        cifs-utils \
        locales \
        shellcheck \
        rsync \
        apt-transport-https \
        debian-archive-keyring \
        sudo \
        openssh-client \
        default-jre \
        p7zip-full \
        software-properties-common \
        dirmngr \
        gnupg \
        netcat-openbsd \
        dh-autoreconf \
        libcurl4-gnutls-dev \
        libexpat1-dev \
        gettext \
        libz-dev \
        libssl-dev \
        build-essential \
        git \
        patchelf \
    && \
    locale-gen en_US.UTF-8 && \
    rm -rf /var/lib/apt/lists/*

RUN dpkg --add-architecture armhf && \
    apt-get update && \
    apt-get install -y --no-install-recommends -f -o Dpkg::Options::="--force-confnew" \
        build-essential \
        libusb-1.0-0-dev:armhf \
        software-properties-common \
        crossbuild-essential-armhf \
        zlib1g-dev \
        libffi-dev \
        libssl-dev \
        chrpath \
        libssl-dev \
        libprotobuf-dev \
        libprotoc-dev \
        protobuf-compiler \
        python3-dev \
        libpython3-dev:armhf \
        libgtk-3-dev:armhf \
        libavcodec-dev:armhf \
        libavformat-dev:armhf \
        libswscale-dev:armhf \
        libhwloc-dev:armhf \
        # For ARM CPU plugin
        scons \
    && \
    rm -rf /var/lib/apt/lists/*

# To cross-compile Python3.7 we need to first compile it for the host
RUN curl -O https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tar.xz && \
    tar -xf Python-3.7.9.tar.xz && \
    cd Python-3.7.9 && ./configure && make -j4 && make altinstall

# Cross-compile Python3.7 for ARM
RUN cd Python-3.7.9 && make distclean && \
    ./configure \
        --host=arm-linux-gnueabihf \
        --build=x86_64-linux-gnu \
        --without-ensurepip \
        --enable-shared \
        --prefix=/opt/python3.7_arm \
        ac_cv_buggy_getaddrinfo=no \
        ac_cv_file__dev_ptmx=yes \
        ac_cv_file__dev_ptc=no && \
    make -j4 && make altinstall

RUN wget https://www.cmake.org/files/v3.21/cmake-3.21.7.tar.gz && \
    tar xf cmake-3.21.7.tar.gz && \
    (cd cmake-3.21.7 && ./bootstrap --parallel=$(nproc --all) && make --jobs=$(nproc --all) && make install) && \
    rm -rf cmake-3.21.7 cmake-3.21.7.tar.gz

RUN /usr/local/bin/python3.7 -m pip install -U pip && \
    /usr/local/bin/python3.7 -m pip install crossenv && \
    /usr/local/bin/python3.7 -m crossenv /opt/python3.7_arm/bin/python3.7m /opt/cross_venv && \
    . /opt/cross_venv/bin/activate && \
    build-pip3 install -U pip wheel setuptools && \
    cross-pip3 install -U pip cython wheel setuptools numpy==1.20.0

RUN unlink /usr/bin/python3 && \
    ln -s /usr/local/bin/python3.7 /usr/bin/python3 && \
    python3 -m pip install -U pip && \
    python3 -m pip install numpy==1.20.0
RUN rm /usr/bin/lsb_release

RUN git config --global user.name "Your Name" && \
    git config --global user.email "you@example.com"

ENV ARCH_NAME arm-linux-gnueabihf
ENV TOOLCHAIN_DEFS arm.toolchain.cmake
COPY scripts/arm_cpu_plugin_build.sh /arm_cpu_plugin_build.sh

# configure paths
RUN mkdir -p /arm_cpu_plugin
WORKDIR /arm_cpu_plugin/

CMD ["sh", "/arm_cpu_plugin_build.sh"]
