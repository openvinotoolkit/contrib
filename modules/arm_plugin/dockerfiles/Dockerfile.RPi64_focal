#This Dockerfile is for x86 and should be used for OpenVINO ARM plugin cross-compilation
#https://github.com/openvinotoolkit/openvino_contrib/tree/master/modules/arm_plugin#how-to-build

FROM ubuntu:20.04

ENV DEBIAN_FRONTEND noninteractive
ENV PAKAGE_UPDATES_OF 20220126

#Prerequisite installation
RUN apt-get update && \
    apt-get -y upgrade && \
    echo deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal main restricted > /etc/apt/sources.list && \
    echo deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal-updates main restricted >> /etc/apt/sources.list && \
    echo deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal universe >> /etc/apt/sources.list && \
    echo deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal-updates universe >> /etc/apt/sources.list && \
    echo deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal multiverse >> /etc/apt/sources.list && \
    echo deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal-updates multiverse >> /etc/apt/sources.list && \
    echo deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse >> /etc/apt/sources.list && \
    echo deb [arch=amd64] http://security.ubuntu.com/ubuntu/ focal-security main restricted >> /etc/apt/sources.list && \
    echo deb [arch=amd64] http://security.ubuntu.com/ubuntu/ focal-security universe >> /etc/apt/sources.list && \
    echo deb [arch=amd64] http://security.ubuntu.com/ubuntu/ focal-security multiverse >> /etc/apt/sources.list && \
    echo deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ focal main >> /etc/apt/sources.list && \
    echo deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ focal universe >> /etc/apt/sources.list && \
    echo deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ focal-updates main >> /etc/apt/sources.list && \
    echo deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ focal-security main >> /etc/apt/sources.list && \
    dpkg --add-architecture arm64 && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        locales \
        sudo \
        shellcheck \
        apt-transport-https \
        debian-archive-keyring \
        software-properties-common \
        gnupg \
        p7zip-full \
        chrpath \
        curl \
        wget \
        git \
        scons \
        build-essential \
        crossbuild-essential-arm64 \
        python3-dev \
        python3-numpy \
        python3-pip \
        libpython3-dev:arm64 \
        libprotoc-dev \
        protobuf-compiler \
        libffi-dev \
        libssl-dev \
        libusb-1.0-0-dev:arm64 \
        libgtk-3-dev:arm64 \
        libavcodec-dev:arm64 \
        libavformat-dev:arm64 \
        libswscale-dev:arm64 \
        libhwloc-dev:arm64 \
        patchelf \
    && \
    locale-gen en_US.UTF-8 && \
    pip3 install cython && \
    rm -rf /var/lib/apt/lists/*

# To cross-compile Python3.8 we need to first compile it for the host
RUN curl -O https://www.python.org/ftp/python/3.8.9/Python-3.8.9.tar.xz && \
    tar -xf Python-3.8.9.tar.xz && \
    cd Python-3.8.9 && ./configure && make -j4 && make altinstall

# Cross-compile Python3.8 for ARM
RUN cd Python-3.8.9 && make distclean && \
    ./configure \
        --host=aarch64-linux-gnu \
        --build=x86_64-linux-gnu \
        --without-ensurepip \
        --enable-shared \
        --prefix=/opt/python3.8_arm \
        ac_cv_buggy_getaddrinfo=no \
        ac_cv_file__dev_ptmx=yes \
        ac_cv_file__dev_ptc=no && \
    make -j4 && make altinstall

RUN wget https://www.cmake.org/files/v3.21/cmake-3.21.7.tar.gz && \
    tar xf cmake-3.21.7.tar.gz && \
    (cd cmake-3.21.7 && ./bootstrap --parallel=$(nproc --all) && make --jobs=$(nproc --all) && make install) && \
    rm -rf cmake-3.21.7 cmake-3.21.7.tar.gz

RUN /usr/local/bin/python3.8 -m pip install -U pip && \
    /usr/local/bin/python3.8 -m pip install crossenv && \
    /usr/local/bin/python3.8 -m crossenv /opt/python3.8_arm/bin/python3.8 /opt/cross_venv && \
    . /opt/cross_venv/bin/activate && \
    build-pip3 install -U pip wheel setuptools && \
    cross-pip3 install -U pip cython wheel setuptools numpy==1.20.0

RUN unlink /usr/bin/python3 && \
    ln -s /usr/local/bin/python3.8 /usr/bin/python3 && \
    python3 -m pip install -U pip && \
    python3 -m pip install numpy==1.20.0
RUN rm /usr/bin/lsb_release

RUN git config --global user.name "Your Name" && \
    git config --global user.email "you@example.com"

ENV ARCH_NAME aarch64-linux-gnu
ENV TOOLCHAIN_DEFS arm64.toolchain.cmake
COPY scripts/arm_cpu_plugin_build.sh /arm_cpu_plugin_build.sh

# configure paths
RUN mkdir -p /arm_cpu_plugin
WORKDIR /arm_cpu_plugin/

CMD ["sh", "/arm_cpu_plugin_build.sh"]
