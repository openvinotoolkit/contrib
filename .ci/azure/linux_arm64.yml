resources:
  repositories:
  - repository: openvino
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/openvino

jobs:
- job: linux_arm64
  # About 150% of total time
  timeoutInMinutes: 120

  pool:
    name: LIN_VMSS_VENV_F16S_U20_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    PYTHON_ARM_VERSION: "3.9.10"
    NUM_PROC: 1
    BUILD_TYPE: Release
    REPO_CONTRIB: $(Build.Repository.LocalPath)
    OPENVINO_REPO: $(REPO_CONTRIB)/../openvino
    REPO_OPENCV: $(REPO_CONTRIB)/../opencv
    BUILD_OPENCV: $(WORK_DIR)/build_opencv
    INSTALL_OPENCV: $(WORK_DIR)/install_opencv
    BUILD_OMZ: $(WORK_DIR)/build_omz
    INSTALL_OMZ: $(WORK_DIR)/install_omz
    REPO_OMZ: $(REPO_CONTRIB)/../open_model_zoo
    BUILD_OPENVINO: $(WORK_DIR)/build
    INSTALL_OPENVINO: $(WORK_DIR)/install_openvino
    BUILD_PYTHON: $(WORK_DIR)/build_python 
    INSTALL_PYTHON: $(WORK_DIR)/install_python 
    BUILD_OPENVINO_PYTHON: $(WORK_DIR)/build_openvino_python 
    WORK_DIR: $(Pipeline.Workspace)/_w
    TMP_DIR: /mnt/tmp
    OCV_TMP_DIR: /mnt/tmp_ocv
    SHARE_DIR: /mount/cinfsshare/onnxtestdata
    OV_CCACHE_DIR: $(SHARE_DIR)/ccache/master/linux_arm64_contrib
    OCV_CCACHE_DIR: $(SHARE_DIR)/ccache/master/linux_arm64_ocv_contrib

  steps:
  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
      echo "##vso[task.setvariable variable=NUM_PROC]$(nproc --all)"
      echo "NUM_PROC=$(NUM_PROC)"
    displayName: 'System information'

  - script: |
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      rm -rf $(BUILD_PYTHON) ; mkdir $(BUILD_PYTHON)
      rm -rf $(INSTALL_PYTHON) ; mkdir $(INSTALL_PYTHON)
      rm -rf $(BUILD_OPENCV) ; mkdir $(BUILD_OPENCV)
      rm -rf $(INSTALL_OPENCV) ; mkdir $(INSTALL_OPENCV)
      rm -rf $(BUILD_OPENVINO) ; mkdir $(BUILD_OPENVINO)
      rm -rf $(INSTALL_OPENVINO) ; mkdir $(INSTALL_OPENVINO)
      rm -rf $(BUILD_OPENVINO_PYTHON) ; mkdir $(BUILD_OPENVINO_PYTHON)
      rm -rf $(BUILD_OMZ) ; mkdir $(BUILD_OMZ)
      rm -rf $(INSTALL_OMZ) ; mkdir $(INSTALL_OMZ)
      sudo rm -rf $(TMP_DIR) ; sudo mkdir $(TMP_DIR) ; sudo chmod 777 -R $(TMP_DIR)
      sudo rm -rf $(OCV_TMP_DIR) ; sudo mkdir $(OCV_TMP_DIR) ; sudo chmod 777 -R $(OCV_TMP_DIR)
      sudo mkdir -p $(SHARE_DIR)
      sudo apt --assume-yes update && sudo apt --assume-yes install nfs-common
      sudo mount -vvv -t nfs cinfsshare.file.core.windows.net:/cinfsshare/onnxtestdata $(SHARE_DIR) -o vers=4,minorversion=1,sec=sys
      mkdir -p $(OV_CCACHE_DIR)
      mkdir -p $(OCV_CCACHE_DIR)
    displayName: 'Make directories'

  - checkout: self
    clean: true
    lfs: false
    submodules: recursive
    path: openvino_contrib

  - checkout: openvino
    clean: true
    lfs: false
    submodules: recursive
    path: openvino

  - script: |
      set -e
      $(OPENVINO_REPO)/install_build_dependencies.sh
      # Move into contrib install_build_dependencies.sh
      sudo apt --assume-yes install scons crossbuild-essential-arm64 libprotoc-dev libhiredis-dev
      sudo apt --assume-yes install protobuf-compiler default-jdk libssl-dev zip libzstd-dev python-dev
      # Speed up build
      wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
      unzip ninja-linux.zip
      sudo cp -v ninja /usr/local/bin/
      # OpenCV should provide install_build_dependencies.sh as well
      # Move into resources
      git clone https://github.com/opencv/opencv.git --depth 1 $(REPO_OPENCV)
      git clone --recurse-submodules -j $(NUM_PROC) https://github.com/openvinotoolkit/open_model_zoo.git $(REPO_OMZ)
    workingDirectory: $(WORK_DIR)
    displayName: 'Install dependencies'

  - script: |
      #### Build python for host 
      wget https://www.python.org/ftp/python/$(PYTHON_ARM_VERSION)/Python-$(PYTHON_ARM_VERSION).tgz
      tar -xzf Python-$(PYTHON_ARM_VERSION).tgz
      mv Python-$(PYTHON_ARM_VERSION) Python-$(PYTHON_ARM_VERSION)-host
      cd Python-$(PYTHON_ARM_VERSION)-host
      ./configure --enable-optimizations
      make -j $(NUM_PROC) python Parser/pgen
      sudo make -j $(NUM_PROC) install
      cp python $(BUILD_PYTHON)
      cp -r Parser/pgen $(BUILD_PYTHON)
      curl https://bootstrap.pypa.io/get-pip.py | $(BUILD_PYTHON)/python - --no-cache-dir numpy cython
      cd ..
      #### Build python for ARM 
      wget https://www.python.org/ftp/python/$(PYTHON_ARM_VERSION)/Python-$(PYTHON_ARM_VERSION).tgz
      tar -xzf Python-$(PYTHON_ARM_VERSION).tgz
      cd Python-$(PYTHON_ARM_VERSION)
      CC=aarch64-linux-gnu-gcc \
      CXX=aarch64-linux-gnu-g++ \
      AR=aarch64-linux-gnu-ar \
      READELF=aarch64-linux-gnu-readelf \
      RANLIB=aarch64-linux-gnu-ranlib \
          ./configure \
          --build=x86_64-linux-gnu \
          --host=aarch64-linux-gnu \
          --prefix=$(INSTALL_PYTHON) \
          --disable-ipv6 ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no ac_cv_have_long_long_format=yes \
          --enable-shared
      make -j $(NUM_PROC) \
          HOSTPYTHON=$(BUILD_PYTHON)/python \
          HOSTPGEN=$(BUILD_PYTHON)/Parser/pgen \
          CROSS-COMPILE=aarch64-linux-gnu- CROSS_COMPILE_TARGET=yes HOSTARCH=aarch64-linux BUILDARCH=aarch64-linux-gnu
      make -j $(NUM_PROC) install
      cd ..
      sudo /usr/local/bin/python3.9 -m pip install numpy cython 
    workingDirectory: $(WORK_DIR)
    displayName: 'Build python for ARM'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -G Ninja 
        -D CMAKE_BUILD_TYPE=$(BUILD_TYPE) 
        -D BUILD_opencv_python2=OFF 
        -D BUILD_opencv_python3=ON 
        -D OPENCV_SKIP_PYTHON_LOADER=OFF 
        -D PYTHON3_LIMITED_API=ON 
        -D PYTHON3_INCLUDE_PATH=$(INSTALL_PYTHON)/include/python3.9 
        -D PYTHON3_LIBRARIES=$(INSTALL_PYTHON)/lib 
        -D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.9/site-packages/numpy/core/include 
        -D CMAKE_USE_RELATIVE_PATHS=ON 
        -D CMAKE_SKIP_INSTALL_RPATH=ON 
        -D OPENCV_SKIP_PKGCONFIG_GENERATION=ON 
        -D OPENCV_BIN_INSTALL_PATH=bin 
        -D OPENCV_PYTHON3_INSTALL_PATH=python 
        -D OPENCV_INCLUDE_INSTALL_PATH=include 
        -D OPENCV_LIB_INSTALL_PATH=lib 
        -D OPENCV_CONFIG_INSTALL_PATH=cmake 
        -D OPENCV_3P_LIB_INSTALL_PATH=3rdparty 
        -D OPENCV_SAMPLES_SRC_INSTALL_PATH=samples 
        -D OPENCV_DOC_INSTALL_PATH=doc 
        -D OPENCV_OTHER_INSTALL_PATH=etc 
        -D OPENCV_LICENSES_INSTALL_PATH=etc/licenses 
        -D CMAKE_TOOLCHAIN_FILE=$(OPENVINO_REPO)/cmake/arm64.toolchain.cmake 
        -D WITH_GTK_2_X=OFF 
        -D OPENCV_ENABLE_PKG_CONFIG=ON 
        -D ENABLE_CCACHE=ON
        -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
        -D CMAKE_C_COMPILER_LAUNCHER=ccache
        -D PKG_CONFIG_EXECUTABLE=/usr/bin/aarch64-pkg-config 
        -D CMAKE_INSTALL_PREFIX=$(INSTALL_OPENCV)
        $(REPO_OPENCV)
      workingDirectory: $(BUILD_OPENCV)
    displayName: 'CMake OpenCV'

  - script: |
      export CCACHE_DIR=$(OCV_CCACHE_DIR)
      export CCACHE_TEMPDIR=$(OCV_TMP_DIR)/ccache
      export CCACHE_BASEDIR=$(Pipeline.Workspace)
      export CCACHE_MAXSIZE=50G
      export USE_CCACHE=1
      ninja
    workingDirectory: $(BUILD_OPENCV)
    displayName: 'Build OpenCV'

  - script: ninja install
    workingDirectory: $(BUILD_OPENCV)
    displayName: 'Install OpenCV'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -DVERBOSE_BUILD=ON
        -DOpenCV_DIR=$(INSTALL_OPENCV)/cmake 
        -DENABLE_OPENCV=OFF 
        -DPYTHON_INCLUDE_DIRS=$(INSTALL_PYTHON)/include/python3.9 
        -DPYTHON_LIBRARY=$(INSTALL_PYTHON)/lib/libpython3.9.so 
        -DENABLE_PYTHON=ON 
        -DPYTHON_MODULE_EXTENSION=".so" 
        -DENABLE_TESTS=ON 
        -DENABLE_FUNCTIONAL_TESTS=ON 
        -DENABLE_GAPI_TESTS=OFF 
        -DENABLE_GAPI_PREPROCESSING=OFF 
        -DENABLE_DATA=OFF 
        -DCMAKE_EXE_LINKER_FLAGS=-Wl,-rpath-link,$(INSTALL_OPENCV)/lib 
        -DTHREADING=SEQ -DENABLE_LTO=ON 
        -DCMAKE_TOOLCHAIN_FILE=$(OPENVINO_REPO)/cmake/arm64.toolchain.cmake 
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DENABLE_SAMPLES=ON
        -DBUILD_java_api=OFF
        -DENABLE_INTEL_VPU=OFF
        -DTHREADING=SEQ
        -DIE_EXTRA_MODULES=$(REPO_CONTRIB)/modules
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DCMAKE_C_COMPILER_LAUNCHER=ccache
        -DARM_COMPUTE_SCONS_JOBS=$(NUM_PROC)
        -DCMAKE_INSTALL_PREFIX=$(INSTALL_OPENVINO)
        $(OPENVINO_REPO)
      workingDirectory: $(BUILD_OPENVINO)
    displayName: 'CMake OpenVINO ARM plugin'

  - script: |
      export CCACHE_DIR=$(OV_CCACHE_DIR)
      export CCACHE_TEMPDIR=$(TMP_DIR)/ccache
      export CCACHE_BASEDIR=$(Pipeline.Workspace)
      export CCACHE_MAXSIZE=50G
      export USE_CCACHE=1
      ninja
    workingDirectory: $(BUILD_OPENVINO)
    displayName: 'Build OpenVINO ARM plugin'

  - script: ninja install
    workingDirectory: $(BUILD_OPENVINO)
    displayName: 'Install OpenVINO ARM plugin'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -DInferenceEngineDeveloperPackage_DIR=$(BUILD_OPENVINO)
        -DENABLE_PYTHON=ON 
        -DPYTHON_EXECUTABLE=$(INSTALL_PYTHON)/bin/python3.9 
        -DPYTHON_INCLUDE_DIRS=$(INSTALL_PYTHON)/include/python3.9 
        -DPYTHON_LIBRARIES=$(INSTALL_PYTHON)/lib
        -DPYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.9/site-packages/numpy/core/include 
        -DPYTHON_MODULE_EXTENSION=".so"
        -DPYBIND11_FINDPYTHON=OFF
        -DPYBIND11_NOPYTHON=OFF
        -DPYTHONLIBS_FOUND=TRUE
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DENABLE_DATA=OFF
        -DCMAKE_EXE_LINKER_FLAGS=-Wl,-rpath-link,$(INSTALL_OPENCV)/lib 
        -DCMAKE_TOOLCHAIN_FILE=$(OPENVINO_REPO)/cmake/arm64.toolchain.cmake 
        -DCMAKE_INSTALL_PREFIX=$(INSTALL_OPENVINO)
        $(OPENVINO_REPO)/src/bindings/python
      workingDirectory: $(BUILD_OPENVINO_PYTHON)
    displayName: 'CMake OpenVINO python binding'

  - script: ninja
    workingDirectory: $(BUILD_OPENVINO_PYTHON)
    displayName: 'Build OpenVINO python binding'

  - script: ninja install
    workingDirectory: $(BUILD_OPENVINO_PYTHON)
    displayName: 'Install OpenVINO python binding'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) 
        -DENABLE_PYTHON=ON 
        -DPYTHON_EXECUTABLE=/usr/local/bin/python3.9
        -DPYTHON_INCLUDE_DIR=$(INSTALL_PYTHON)/include/python3.9 
        -DPYTHON_LIBRARY=$(INSTALL_PYTHON)/lib
        -DCMAKE_TOOLCHAIN_FILE=$(OPENVINO_REPO)/cmake/arm64.toolchain.cmake
        -DInferenceEngine_DIR=$(BUILD_OPENVINO)
        -DOpenCV_DIR=$(INSTALL_OPENCV)/cmake 
        -Dngraph_DIR=$(BUILD_OPENVINO)/src/core
        -DIE_EXTRA_MODULES=$(REPO_CONTRIB)/modules
        -DCMAKE_INSTALL_PREFIX=$(INSTALL_OMZ)
        $(REPO_OMZ)/demos
      workingDirectory: $(BUILD_OMZ)
    displayName: 'CMake Open Model Zoo demos'

  - script: ninja
    workingDirectory: $(BUILD_OMZ)
    displayName: 'Build Open Model Zoo demos'

  - script: ninja install
    workingDirectory: $(BUILD_OMZ)
    displayName: 'Install Open Model Zoo demos'

  - script: |
      zip -r $(INSTALL_OPENVINO)/openvino_install_files.zip $(INSTALL_PYTHON) $(INSTALL_OPENCV) $(INSTALL_OPENVINO) $(INSTALL_OMZ)
      ls -alR $(INSTALL_PYTHON)
      ls -alR $(INSTALL_OPENCV)
      ls -alR $(INSTALL_OPENVINO)
      ls -alR $(INSTALL_OMZ)
    displayName: 'Zip & List install files'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(INSTALL_OPENVINO)/openvino_install_files.zip'
      artifactName: openvino_arm_install
    displayName: 'Publish install archive'
