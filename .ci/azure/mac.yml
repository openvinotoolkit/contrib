trigger:
  branches:
    include:
    - master
    - releases/*
  paths:
    exclude:
    - modules/nvidia_plugin
    - modules/openvino_code

pr:
  branches:
    include:
    - master
    - releases/*
  paths:
    exclude:
    - modules/nvidia_plugin
    - modules/openvino_code

resources:
  repositories:
  - repository: openvino
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/openvino
    ref: releases/2024/1

  - repository: testdata
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/testdata
    ref: releases/2024/1

jobs:
- job: Mac
  strategy:
    matrix:
      x86_64:
        CMAKE_OSX_ARCHITECTURES: x86_64
      # arm64:
      #   CMAKE_OSX_ARCHITECTURES: arm64
  # About 200% of total time (perfomace of Mac hosts is unstable)
  timeoutInMinutes: 240

  pool:
    vmImage: 'macOS-11'

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    REPO_DIR: $(Build.Repository.LocalPath)
    OPENVINO_REPO_DIR: $(REPO_DIR)/../openvino
    MODELS_PATH: $(REPO_DIR)/../testdata
    WORK_DIR: $(Pipeline.Workspace)/_w
    BUILD_DIR: $(WORK_DIR)/build
    BUILD_WHEEL_DIR: $(BUILD_DIR)/wheels
    BIN_DIR: $(OPENVINO_REPO_DIR)/bin/intel64/$(BUILD_TYPE)
    INSTALL_DIR: $(WORK_DIR)/install_pkg
    SETUPVARS: $(INSTALL_DIR)/setupvars.sh

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.10.13'
      addToPath: true
      architecture: 'x64'
      githubToken: $(auth_token)
    displayName: Setup Python 3.10
    name: setupPython

  - script: |
      whoami
      uname -a
      which python3
      python3 --version
      which java
      java -version
      gcc --version
      xcrun --sdk macosx --show-sdk-version
      env
      sysctl -a
    displayName: 'System info'

  - script: |
      set -e
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      rm -rf $(BUILD_DIR) ; mkdir $(BUILD_DIR)
    displayName: 'Make dir'

  - checkout: self
    clean: true
    lfs: false
    submodules: recursive
    path: openvino_contrib

  - checkout: openvino
    clean: true
    lfs: false
    submodules: recursive
    path: openvino

  - checkout: testdata
    clean: true
    lfs: true
    path: testdata

  - script: |
      set -e
      brew install cython
      brew install automake
      # for ARM compute
      brew install scons
      # Speed up build
      brew install ninja
      # install python wheel dependencies
      python3.10 -m pip install --upgrade pip
      python3.10 -m pip install -r $(OPENVINO_REPO_DIR)/src/bindings/python/wheel/requirements-dev.txt
    workingDirectory: $(WORK_DIR)
    displayName: 'Install dependencies'

  - script: |
      set -e
      export PATH="/usr/local/opt/cython/bin:$PATH"
      cmake -GNinja \
        -DCMAKE_VERBOSE_MAKEFILE=ON \
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \
        -DBUILD_nvidia_plugin=OFF \
        -DOPENVINO_EXTRA_MODULES=$(REPO_DIR)/modules \
        -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
        -DCMAKE_OSX_ARCHITECTURES=$(CMAKE_OSX_ARCHITECTURES) \
        -DENABLE_OV_PADDLE_FRONTEND=OFF \
        -DENABLE_OV_TF_FRONTEND=OFF \
        -DENABLE_OV_TF_LITE_FRONTEND=OFF \
        -DENABLE_OV_PYTORCH_FRONTEND=OFF \
        -DENABLE_CPPLINT=OFF \
        -DPython3_EXECUTABLE=`which python3.10` \
        -S $(OPENVINO_REPO_DIR) \
        -B $(BUILD_DIR)
    displayName: 'CMake OpenVINO Contrib'

  - script: ninja
    workingDirectory: $(BUILD_DIR)
    displayName: 'Build OpenVINO Contrib'

  - script: ls -alR $(OPENVINO_REPO_DIR)/bin/
    displayName: 'List bin files'

  - script: cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P cmake_install.cmake
    workingDirectory: $(BUILD_DIR)
    displayName: 'Install OpenVINO Contrib'

  - script: ls -alR $(INSTALL_DIR)
    displayName: 'List install files'

  - script: |
      set -e
      . $(SETUPVARS) gradle clean build --info
      for d in CPU HETERO:CPU; do
        gradle test -Prun_tests -DMODELS_PATH=$(MODELS_PATH) -Ddevice=$d --info;
      done
    workingDirectory: $(REPO_DIR)/modules/java_api
    displayName: 'Java tests'
    condition: eq(variables['CMAKE_OSX_ARCHITECTURES'], 'x86_64')

  - script: |
      set -e
      python3 -m venv venv
      source venv/bin/activate && source $(SETUPVARS)
      python -m pip install --upgrade pip
      python -m pip install -r $(REPO_DIR)/modules/custom_operations/tests/requirements.txt
      # Find and install wheel
      pushd $(INSTALL_DIR)/tools
        wheel_name=$(find . -name 'openvino-*.whl')
        python -m pip install $wheel_name
      popd
    workingDirectory: $(WORK_DIR)
    displayName: 'Create virtual env'

  - publish: $(BUILD_WHEEL_DIR)
    artifact: Wheels
