resources:
  repositories:
  - repository: openvino
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/openvino
  - repository: opencv
    type: github
    endpoint: openvinotoolkit
    name: opencv/opencv

jobs:
- job: linux_coverity_arm64
  # About 150% of total time
  timeoutInMinutes: 90

  pool:
    name: LIN_VMSS_VENV_F16S_U20_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    REPO_DIR: $(Build.Repository.LocalPath)
    OPENVINO_REPO_DIR: $(REPO_DIR)/../openvino
    OPENCV_REPO_DIR: $(REPO_DIR)/../opencv
    WORK_DIR: $(Pipeline.Workspace)/_w
    BUILD_DIR_ARM_PLUGIN: $(WORK_DIR)/build_arm_plugin
    BUILD_DIR_OPENVINO: $(WORK_DIR)/build_openvino
    BUILD_DIR_OPENCV: $(WORK_DIR)/build_opencv

  steps:
  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
    displayName: 'System information'

  - script: |
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      rm -rf $(BUILD_DIR_OPENVINO) ; mkdir $(BUILD_DIR_OPENVINO)
      rm -rf $(BUILD_DIR_OPENCV) ; mkdir $(BUILD_DIR_OPENCV)
      rm -rf $(BUILD_DIR_ARM_PLUGIN) ; mkdir $(BUILD_DIR_ARM_PLUGIN)
    displayName: 'Make dir'

  - checkout: self
    clean: true
    lfs: false
    submodules: recursive
    path: openvino_contrib

  - checkout: openvino
    clean: true
    lfs: false
    submodules: recursive
    path: openvino

  - checkout: opencv
    clean: true
    lfs: false
    submodules: recursive
    path: opencv

  - script: |
      set -e
      $(OPENVINO_REPO_DIR)/install_build_dependencies.sh
      sudo apt --assume-yes install scons crossbuild-essential-arm64 libprotoc-dev protobuf-compiler
      # Move jdk into contrib
      sudo apt --assume-yes install openjdk-11-jdk
      # Speed up build
      wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
      unzip ninja-linux.zip
      sudo cp -v ninja /usr/local/bin/
    workingDirectory: $(WORK_DIR)
    displayName: 'Install dependencies'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -DVERBOSE_BUILD=ON
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DBUILD_LIST=imgcodecs,videoio,highgui
        -DCMAKE_TOOLCHAIN_FILE=$(OPENCV_REPO_DIR)/platforms/linux/aarch64-gnu.toolchain.cmake
        $(OPENCV_REPO_DIR)
      workingDirectory: $(BUILD_DIR_OPENCV)

  - script: ninja
    workingDirectory: $(BUILD_DIR_OPENCV)
    displayName: 'Build OpenCV Linux ARM64'

  - script: ninja install
    workingDirectory: $(BUILD_DIR_OPENCV)
    displayName: 'Install OpenCV Linux ARM64'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -DVERBOSE_BUILD=ON
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DCMAKE_TOOLCHAIN_FILE=$(OPENVINO_REPO_DIR)/cmake/arm64.toolchain.cmake
        -DOpenCV_DIR=$(BUILD_DIR_OPENCV)/install/lib/cmake/opencv4
        -DENABLE_FASTER_BUILD=ON
        -DENABLE_INTEL_MYRIAD=OFF
        -DENABLE_STRICT_DEPENDENCIES=OFF
        -DENABLE_REQUIREMENTS_INSTALL=OFF
        $(OPENVINO_REPO_DIR)
      workingDirectory: $(BUILD_DIR_OPENVINO)

  - script: ninja
    workingDirectory: $(BUILD_DIR_OPENVINO)
    displayName: 'Build OpenVINO Linux ARM64'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -DVERBOSE_BUILD=ON
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DCMAKE_TOOLCHAIN_FILE=$(OPENVINO_REPO_DIR)/cmake/arm64.toolchain.cmake
        -DInferenceEngineDeveloperPackage_DIR=$(BUILD_DIR_OPENVINO)
        $(REPO_DIR)/modules/arm_plugin
      workingDirectory: $(BUILD_DIR_ARM_PLUGIN)

  - script: |
        set -e
        wget https://scan.coverity.com/download/linux64 --post-data "token=$(COVERITY_TOKEN)&project=openvino-contrib" -O coverity_tool.tgz
        tar xvf coverity_tool.tgz
        rm coverity_tool.tgz
    workingDirectory: $(WORK_DIR)
    displayName: 'Install Coverity tool'

  - script: $(WORK_DIR)/cov-analysis*/bin/cov-configure --compiler aarch64-linux-gnu-gcc --comptype gcc --template
    workingDirectory: $(BUILD_DIR_ARM_PLUGIN)
    displayName: 'Configure Coverity'

  - script: $(WORK_DIR)/cov-analysis*/bin/cov-build --dir $(BUILD_DIR_ARM_PLUGIN)/cov-int ninja
    workingDirectory: $(BUILD_DIR_ARM_PLUGIN)
    displayName: 'Build ARM plugin with Coverity'

  - script: tar -C $(BUILD_DIR_ARM_PLUGIN) -czvf openvino_contrib.tgz cov-int
    workingDirectory: $(BUILD_DIR_ARM_PLUGIN)
    displayName: 'Pack cov-int folder for submission'

  - script: |
        curl --form token=$(COVERITY_TOKEN) \
          --form email=$(COVERITY_USER) \
          --form file=@openvino_contrib.tgz \
          --form version="$(Build.SourceVersion)" \
          --form description="https://github.com/openvinotoolkit/openvino_contrib/runs/$(Build.BuildNumber)" \
          https://scan.coverity.com/builds?project=openvino-contrib
    workingDirectory: $(BUILD_DIR_ARM_PLUGIN)
    displayName: 'Submit Coverity build for analysis'
